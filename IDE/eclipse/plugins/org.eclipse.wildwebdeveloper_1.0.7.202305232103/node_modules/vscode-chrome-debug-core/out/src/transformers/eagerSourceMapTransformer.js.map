{"version":3,"sources":["../src/transformers/eagerSourceMapTransformer.ts"],"names":[],"mappings":"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","file":"eagerSourceMapTransformer.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as path from 'path';\n\nimport { BaseSourceMapTransformer } from './baseSourceMapTransformer';\n\nimport { ILaunchRequestArgs, IAttachRequestArgs } from '../debugAdapterInterfaces';\nimport * as utils from '../utils';\nimport { logger } from 'vscode-debugadapter';\n\n/**\n * Load SourceMaps on launch. Requires reading the file and parsing out the sourceMappingURL, because\n * if you wait until the script is loaded as in LazySMT, you get that info from the runtime.\n */\nexport class EagerSourceMapTransformer extends BaseSourceMapTransformer {\n    private static SOURCE_MAPPING_MATCHER = new RegExp('^//[#@] ?sourceMappingURL=(.+)$');\n\n    protected init(args: ILaunchRequestArgs | IAttachRequestArgs): void {\n        super.init(args);\n        if (args.sourceMaps) {\n            const generatedCodeGlobs = args.outFiles ?\n                args.outFiles :\n                args.outDir ?\n                    [path.join(args.outDir, '**/*.js')] :\n                    [];\n\n            // try to find all source files upfront asynchronously\n            if (generatedCodeGlobs.length > 0) {\n                logger.log('SourceMaps: preloading sourcemaps for scripts in globs: ' + JSON.stringify(generatedCodeGlobs));\n                this._preLoad = utils.multiGlob(generatedCodeGlobs)\n                    .then(paths => {\n                        logger.log(`SourceMaps: expanded globs and found ${paths.length} scripts`);\n                        return Promise.all(paths.map(scriptPath => this.discoverSourceMapForGeneratedScript(scriptPath)));\n                    })\n                    .then(() => { });\n            } else {\n                this._preLoad = Promise.resolve();\n            }\n        }\n    }\n\n    private discoverSourceMapForGeneratedScript(generatedScriptPath: string): Promise<void> {\n        return this.findSourceMapUrlInFile(generatedScriptPath)\n            .then(uri => {\n                if (uri) {\n                    logger.log(`SourceMaps: sourcemap url parsed from end of generated content: ${uri}`);\n                    return this._sourceMaps.processNewSourceMap(generatedScriptPath, undefined, uri, this._isVSClient);\n                } else {\n                    logger.log(`SourceMaps: no sourcemap url found in generated script: ${generatedScriptPath}`);\n                    return undefined;\n                }\n            })\n            .catch(err => {\n                // If we fail to preload one, ignore and keep going\n                logger.log(`SourceMaps: could not preload for generated script: ${generatedScriptPath}. Error: ${err.toString()}`);\n            });\n    }\n\n    /**\n     * Try to find the 'sourceMappingURL' in content or the file with the given path.\n     * Returns null if no source map url is found or if an error occured.\n     */\n    private findSourceMapUrlInFile(pathToGenerated: string, content?: string): Promise<string> {\n        if (content) {\n            return Promise.resolve(this.findSourceMapUrl(content));\n        }\n\n        return utils.readFileP(pathToGenerated)\n            .then(fileContents => this.findSourceMapUrl(fileContents));\n    }\n\n    /**\n     * Try to find the 'sourceMappingURL' at the end of the given contents.\n     * Relative file paths are converted into absolute paths.\n     * Returns null if no source map url is found.\n     */\n    private findSourceMapUrl(contents: string): string {\n        const lines = contents.split('\\n');\n        for (let l = lines.length - 1; l >= Math.max(lines.length - 10, 0); l--) {    // only search for url in the last 10 lines\n            const line = lines[l].trim();\n            const matches = EagerSourceMapTransformer.SOURCE_MAPPING_MATCHER.exec(line);\n            if (matches && matches.length === 2) {\n                return matches[1].trim();\n            }\n        }\n\n        return null;\n    }\n}\n"],"sourceRoot":"../.."}