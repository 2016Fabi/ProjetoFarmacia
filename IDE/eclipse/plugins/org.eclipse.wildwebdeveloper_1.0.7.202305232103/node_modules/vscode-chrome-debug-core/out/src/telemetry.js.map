{"version":3,"sources":["../src/telemetry.ts"],"names":[],"mappings":"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","file":"telemetry.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { OutputEvent } from 'vscode-debugadapter';\nimport { fillErrorDetails } from './utils';\n\n/* __GDPR__FRAGMENT__\n   \"IExecutionResultTelemetryProperties\" : {\n        \"successful\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n        \"exceptionType\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n        \"!exceptionMessage\" : { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n        \"exceptionName\" : { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n        \"!exceptionStack\" : { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n        \"!exceptionId\" : { \"classification\": \"CallstackOrException\", \"purpose\": \"PerformanceAndHealth\" },\n        \"startTime\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" },\n        \"timeTakenInMilliseconds\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n   }\n */\nexport type ExceptionType = 'uncaughtException' | 'unhandledRejection' | 'firstChance';\nexport interface IExecutionResultTelemetryProperties {\n    // There is an issue on some clients and reportEvent only currently accept strings properties,\n    // hence all the following properties must be strings.\n    successful?: 'true' | 'false';\n    exceptionType?: ExceptionType;\n    exceptionMessage?: string;\n    exceptionName?: string;\n    exceptionStack?: string;\n    exceptionId?: string;\n    startTime?: string;\n    timeTakenInMilliseconds?: string;\n}\n\n// telemetry keys to prefix with `!` over DAP for classification in VS Code.\nconst prefixTelemetryKeys: ReadonlyArray<keyof IExecutionResultTelemetryProperties> = ['exceptionStack', 'exceptionMessage', 'exceptionId'];\n\nexport interface ITelemetryReporter {\n    reportEvent(name: string, data?: any): void;\n    setupEventHandler(_sendEvent: (event: DebugProtocol.Event) => void): void;\n}\n\nexport class TelemetryReporter implements ITelemetryReporter {\n    private _sendEvent: (event: DebugProtocol.Event) => void;\n    private _globalTelemetryProperties: any = {};\n\n    reportEvent(name: string, data?: any): void {\n        if (!this._sendEvent) {\n            return;\n        }\n\n        const combinedData = Object.assign({}, this._globalTelemetryProperties, data);\n        for (const key of prefixTelemetryKeys) {\n            if (combinedData.hasOwnProperty(key)) {\n                combinedData[`!${key}`] = combinedData[key];\n                delete combinedData[key];\n            }\n        }\n\n        const event = new OutputEvent(name, 'telemetry', combinedData);\n        this._sendEvent(event);\n    }\n\n    setupEventHandler(_sendEvent: (event: DebugProtocol.Event) => void): void {\n        this._sendEvent = _sendEvent;\n    }\n\n    public addCustomGlobalProperty(additionalGlobalTelemetryProperties: any): void {\n        Object.assign(this._globalTelemetryProperties, additionalGlobalTelemetryProperties);\n    }\n}\n\n// If you add an async global property, all events after that will include it\nexport class AsyncGlobalPropertiesTelemetryReporter implements ITelemetryReporter {\n    private _actionsQueue = Promise.resolve() as Promise<any>;\n\n    constructor(private _telemetryReporter: TelemetryReporter) {\n        // We just store the parameter\n    }\n\n    public reportEvent(name: string, data?: any): void {\n        /*\n         * TODO: Put this code back after VS stops dropping telemetry events that happen after fatal errors, and disconnecting...\n         * VS has a bug where it drops telemetry events that happen after a fatal error, or after the DA starts disconnecting. Our\n         * temporary workaround is to make telemetry sync, so it'll likely be sent before we send the fatal errors, etc...\n        this._actionsQueue = this._actionsQueue.then(() => // We block the report event until all the addCustomGlobalProperty have finished\n            this._telemetryReporter.reportEvent(name, data));\n         */\n        this._telemetryReporter.reportEvent(name, data);\n    }\n\n    public setupEventHandler(_sendEvent: (event: DebugProtocol.Event) => void): void {\n        this._telemetryReporter.setupEventHandler(_sendEvent);\n    }\n\n    public addCustomGlobalProperty(additionalGlobalPropertiesPromise: Promise<any> | any): void {\n        const reportedPropertyP = Promise.resolve(additionalGlobalPropertiesPromise).then(\n            property => this._telemetryReporter.addCustomGlobalProperty(property),\n            rejection => this.reportErrorWhileWaitingForProperty(rejection));\n        this._actionsQueue = Promise.all([this._actionsQueue, reportedPropertyP]);\n    }\n\n    private reportErrorWhileWaitingForProperty(rejection: any): void {\n        let properties: IExecutionResultTelemetryProperties = {};\n        properties.successful = 'false';\n        properties.exceptionType = 'firstChance';\n        fillErrorDetails(properties, rejection);\n\n        /* __GDPR__\n           \"error-while-adding-custom-global-property\" : {\n             \"${include}\": [\n                 \"${IExecutionResultTelemetryProperties}\"\n             ]\n           }\n         */\n        this._telemetryReporter.reportEvent('error-while-adding-custom-global-property', properties);\n    }\n}\n\nexport class NullTelemetryReporter implements ITelemetryReporter {\n    reportEvent(name: string, data?: any): void {\n        // no-op\n    }\n\n    setupEventHandler(_sendEvent: (event: DebugProtocol.Event) => void): void {\n        // no-op\n    }\n\n}\n\nexport const DefaultTelemetryIntervalInMilliseconds = 10000;\n\nexport class BatchTelemetryReporter {\n    private _eventBuckets: {[eventName: string]: any};\n    private _timer: NodeJS.Timer;\n\n    public constructor(private _telemetryReporter: ITelemetryReporter, private _cadenceInMilliseconds: number = DefaultTelemetryIntervalInMilliseconds) {\n        this.reset();\n        this.setup();\n    }\n\n    public reportEvent(name: string, data?: any): void {\n        if (!this._eventBuckets[name]) {\n            this._eventBuckets[name] = [];\n        }\n\n        this._eventBuckets[name].push(data);\n    }\n\n    public finalize(): void {\n        this.send();\n        clearInterval(this._timer);\n    }\n\n    private setup(): void {\n        this._timer = setInterval(() => this.send(), this._cadenceInMilliseconds);\n    }\n\n    private reset(): void {\n        this._eventBuckets = {};\n    }\n\n    private send(): void {\n        for (const eventName in this._eventBuckets) {\n            const bucket = this._eventBuckets[eventName];\n            let properties = BatchTelemetryReporter.transfromBucketData(bucket);\n            this._telemetryReporter.reportEvent(eventName, properties);\n        }\n\n        this.reset();\n    }\n    /**\n     * Transfrom the bucket of events data from the form:\n     * [{\n     *  p1: v1,\n     *  p2: v2\n     * },\n     * {\n     *  p1: w1,\n     *  p2: w2\n     *  p3: w3\n     * }]\n     *\n     * to\n     * {\n     *   p1: [v1,   w1],\n     *   p2: [v2,   w2],\n     *   p3: [null, w3]\n     * }\n     *\n     *\n     * The later form is easier for downstream telemetry analysis.\n     */\n    private static transfromBucketData(bucketForEventType: any[]): {[groupedPropertyValue: string]: string} {\n        const allPropertyNamesInTheBucket = BatchTelemetryReporter.collectPropertyNamesFromAllEvents(bucketForEventType);\n        let properties = {};\n\n        // Create a holder for all potential property names.\n        for (const key of allPropertyNamesInTheBucket) {\n            properties[`aggregated.${key}`] = [];\n        }\n\n        // Run through all the events in the bucket, collect the values for each property name.\n        for (const event of bucketForEventType) {\n            for (const propertyName of allPropertyNamesInTheBucket) {\n                properties[`aggregated.${propertyName}`].push(event[propertyName] === undefined ? null : event[propertyName]);\n            }\n        }\n\n        // Serialize each array as the final aggregated property value.\n        for (const propertyName of allPropertyNamesInTheBucket) {\n            properties[`aggregated.${propertyName}`] = JSON.stringify(properties[`aggregated.${propertyName}`]);\n        }\n\n        return properties;\n    }\n\n    /**\n     * Get the property keys from all the entries of a event bucket:\n     *\n     * So\n     * [{\n     *  p1: v1,\n     *  p2: v2\n     * },\n     * {\n     *  p1: w1,\n     *  p2: w2\n     *  p3: w3\n     * }]\n     *\n     * will return ['p1', 'p2', 'p3']\n     */\n    private static collectPropertyNamesFromAllEvents(bucket: any[]): string[] {\n        let propertyNamesSet = {};\n        for (const entry of bucket) {\n            for (const key of Object.keys(entry)) {\n                propertyNamesSet[key] = true;\n            }\n        }\n        return Object.keys(propertyNamesSet);\n    }\n}\n\nexport interface ITelemetryPropertyCollector {\n    getProperties(): {[propertyName: string]: string};\n    addTelemetryProperty(propertyName: string, value: string): void;\n}\n\nexport class TelemetryPropertyCollector implements ITelemetryPropertyCollector {\n    private _properties: {[propertyName: string]: string} = {};\n\n    public getProperties() {\n        return this._properties;\n    }\n\n    public addTelemetryProperty(propertyName: string, value: string) {\n        this._properties[propertyName] = value;\n    }\n}\n\nexport const telemetry = new AsyncGlobalPropertiesTelemetryReporter(new TelemetryReporter());\n"],"sourceRoot":".."}