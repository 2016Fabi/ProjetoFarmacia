{"version":3,"sources":["../src/chrome/variablesManager.ts"],"names":[],"mappings":"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","file":"variablesManager.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { logger } from 'vscode-debugadapter';\nimport { IVariablesResponseBody,\n    ISetVariableResponseBody } from '../debugAdapterInterfaces';\nimport * as ChromeUtils from './chromeUtils';\nimport { Protocol as Crdp } from 'devtools-protocol';\nimport { IPropCount, isIndexedPropName, IVariableContainer } from './variables';\nimport * as variables from './variables';\nimport * as errors from '../errors';\nimport * as utils from '../utils';\nimport { VariableContext } from './chromeDebugAdapter';\nimport { ChromeConnection } from './chromeConnection';\n\n/**\n * A container for managing get/set variable calls\n */\nexport class VariablesManager {\n\n    private _variableHandles: variables.VariableHandles;\n    private get chrome() { return this._chromeConnection.api; }\n\n    constructor(private readonly _chromeConnection: ChromeConnection) {\n        this._variableHandles = new variables.VariableHandles();\n    }\n\n    public getVariables(args: DebugProtocol.VariablesArguments): Promise<IVariablesResponseBody | undefined> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        const handle = this._variableHandles.get(args.variablesReference);\n        if (!handle) {\n            return Promise.resolve<IVariablesResponseBody>(undefined);\n        }\n\n        return handle.expand(this, args.filter, args.start, args.count)\n            .catch(err => {\n                logger.log('Error handling variables request: ' + err.toString());\n                return [];\n            }).then(variables => {\n                return { variables };\n            });\n    }\n\n    public getVariablesForObjectId(objectId: string, evaluateName?: string, filter?: string, start?: number, count?: number): Promise<DebugProtocol.Variable[]> {\n        if (typeof start === 'number' && typeof count === 'number') {\n            return this.getFilteredVariablesForObject(objectId, evaluateName, filter, start, count);\n        }\n\n        filter = filter === 'indexed' ? 'all' : filter;\n\n        return Promise.all([\n            // Need to make two requests to get all properties\n            this.getRuntimeProperties({ objectId, ownProperties: false, accessorPropertiesOnly: true, generatePreview: true }),\n            this.getRuntimeProperties({ objectId, ownProperties: true, accessorPropertiesOnly: false, generatePreview: true })\n        ]).then(getPropsResponses => {\n            // Sometimes duplicates will be returned - merge all descriptors by name\n            const propsByName = new Map<string, Crdp.Runtime.PropertyDescriptor>();\n            const internalPropsByName = new Map<string, Crdp.Runtime.InternalPropertyDescriptor>();\n            getPropsResponses.forEach(response => {\n                if (response) {\n                    response.result.forEach(propDesc =>\n                        propsByName.set(propDesc.name, propDesc));\n\n                    if (response.internalProperties) {\n                        response.internalProperties.forEach(internalProp => {\n                            internalPropsByName.set(internalProp.name, internalProp);\n                        });\n                    }\n                }\n            });\n\n            // Convert Chrome prop descriptors to DebugProtocol vars\n            const variables: Promise<DebugProtocol.Variable>[] = [];\n            propsByName.forEach(propDesc => {\n                if (!filter || filter === 'all' || (isIndexedPropName(propDesc.name) === (filter === 'indexed'))) {\n                    variables.push(this.propertyDescriptorToVariable(propDesc, objectId, evaluateName));\n                }\n            });\n\n            internalPropsByName.forEach(internalProp => {\n                if (!filter || filter === 'all' || (isIndexedPropName(internalProp.name) === (filter === 'indexed'))) {\n                    variables.push(Promise.resolve(this.internalPropertyDescriptorToVariable(internalProp, evaluateName)));\n                }\n            });\n\n            return Promise.all(variables);\n        }).then(variables => {\n            // Sort all variables properly\n            return variables.sort((var1, var2) => ChromeUtils.compareVariableNames(var1.name, var2.name));\n        });\n    }\n\n    public onPaused() {\n        this._variableHandles.onPaused();\n    }\n\n    public createHandle(value: IVariableContainer, context?: VariableContext): number {\n        return this._variableHandles.create(value, context);\n    }\n\n    public setPropertyValue(objectId: string, propName: string, value: string): Promise<string> {\n        const setPropertyValueFn = `function() { return this[\"${propName}\"] = ${value}; }`;\n        return this.chrome.Runtime.callFunctionOn({\n            objectId,\n            functionDeclaration: setPropertyValueFn,\n            silent: true\n        }).then(response => {\n            if (response.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                return Promise.reject<string>(errors.errorFromEvaluate(errMsg));\n            } else {\n                // Temporary, Microsoft/vscode#12019\n                return ChromeUtils.remoteObjectToValue(response.result).value;\n            }\n        },\n        error => Promise.reject<string>(errors.errorFromEvaluate(error.message)));\n    }\n\n    private getRuntimeProperties(params: Crdp.Runtime.GetPropertiesRequest): Promise<Crdp.Runtime.GetPropertiesResponse> {\n        return this.chrome.Runtime.getProperties(params)\n            .catch(err => {\n                if (err.message.startsWith('Cannot find context with specified id')) {\n                    // Hack to ignore this error until we fix https://github.com/Microsoft/vscode/issues/18001 to not request variables at unexpected times.\n                    return null;\n                } else {\n                    throw err;\n                }\n            });\n    }\n\n    private getFilteredVariablesForObject(objectId: string, evaluateName: string, filter: string, start: number, count: number): Promise<DebugProtocol.Variable[]> {\n        // No ES6, in case we talk to an old runtime\n        const getIndexedVariablesFn = `\n            function getIndexedVariables(start, count) {\n                var result = [];\n                for (var i = start; i < (start + count); i++) result[i] = this[i];\n                return result;\n            }`;\n        // TODO order??\n        const getNamedVariablesFn = `\n            function getNamedVariablesFn(start, count) {\n                var result = [];\n                var ownProps = Object.getOwnPropertyNames(this);\n                for (var i = start; i < (start + count); i++) result[i] = ownProps[i];\n                return result;\n            }`;\n\n        const getVarsFn = filter === 'indexed' ? getIndexedVariablesFn : getNamedVariablesFn;\n        return this.getFilteredVariablesForObjectId(objectId, evaluateName, getVarsFn, filter, start, count);\n    }\n\n    private getFilteredVariablesForObjectId(objectId: string, evaluateName: string, getVarsFn: string, filter: string, start: number, count: number): Promise<DebugProtocol.Variable[]> {\n        return this.chrome.Runtime.callFunctionOn({\n            objectId,\n            functionDeclaration: getVarsFn,\n            arguments: [{ value: start }, { value: count }],\n            silent: true\n        }).then<DebugProtocol.Variable[]>(evalResponse => {\n            if (evalResponse.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(evalResponse.exceptionDetails);\n                return Promise.reject(errors.errorFromEvaluate(errMsg));\n            } else {\n                // The eval was successful and returned a reference to the array object. Get the props, then filter\n                // out everything except the index names.\n                return this.getVariablesForObjectId(evalResponse.result.objectId, evaluateName, filter)\n                    .then(variables => variables.filter(variable => isIndexedPropName(variable.name)));\n            }\n        },\n        error => Promise.reject(errors.errorFromEvaluate(error.message)));\n    }\n\n    public setVariable(args: DebugProtocol.SetVariableArguments): Promise<ISetVariableResponseBody> {\n        const handle = this._variableHandles.get(args.variablesReference);\n        if (!handle) {\n            return Promise.reject(errors.setValueNotSupported());\n        }\n\n        return handle.setValue(this, args.name, args.value)\n            .then(value => ({ value }));\n    }\n\n    public setVariableValue(callFrameId: string, scopeNumber: number, variableName: string, value: string): Promise<string> {\n        let evalResultObject: Crdp.Runtime.RemoteObject;\n        return this.chrome.Debugger.evaluateOnCallFrame({ callFrameId, expression: value, silent: true }).then(evalResponse => {\n            if (evalResponse.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(evalResponse.exceptionDetails);\n                return Promise.reject(errors.errorFromEvaluate(errMsg));\n            } else {\n                evalResultObject = evalResponse.result;\n                const newValue = ChromeUtils.remoteObjectToCallArgument(evalResultObject);\n                return this.chrome.Debugger.setVariableValue({ callFrameId, scopeNumber, variableName, newValue });\n            }\n        },\n        error => Promise.reject(errors.errorFromEvaluate(error.message)))\n        // Temporary, Microsoft/vscode#12019\n        .then(() => ChromeUtils.remoteObjectToValue(evalResultObject).value);\n    }\n\n    public createObjectVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName: string, context: VariableContext): Promise<DebugProtocol.Variable> {\n        if ((<string>object.subtype) === 'internal#location') {\n            // Could format this nicely later, see #110\n            return Promise.resolve(variables.createPrimitiveVariableWithValue(name, 'internal#location', parentEvaluateName));\n        } else if (object.subtype === 'null') {\n            return Promise.resolve(variables.createPrimitiveVariableWithValue(name, 'null', parentEvaluateName));\n        }\n\n        const value = variables.getRemoteObjectPreview_object(object, context);\n        let propCountP: Promise<IPropCount>;\n        if (object.subtype === 'array' || object.subtype === 'typedarray') {\n            if (object.preview && !object.preview.overflow) {\n                propCountP = Promise.resolve(variables.getArrayNumPropsByPreview(object));\n            } else if (object.className === 'Buffer') {\n                propCountP = this.getBufferNumPropsByEval(object.objectId);\n            } else {\n                propCountP = this.getArrayNumPropsByEval(object.objectId);\n            }\n        } else if (object.subtype === 'set' || object.subtype === 'map') {\n            if (object.preview && !object.preview.overflow) {\n                propCountP = Promise.resolve(variables.getCollectionNumPropsByPreview(object));\n            } else {\n                propCountP = this.getCollectionNumPropsByEval(object.objectId);\n            }\n        } else {\n            propCountP = Promise.resolve({\n                indexedVariables: undefined,\n                namedVariables: undefined\n            });\n        }\n\n        const evaluateName = ChromeUtils.getEvaluateName(parentEvaluateName, name);\n        const variablesReference = this._variableHandles.create(variables.createPropertyContainer(object, evaluateName), context);\n        return propCountP.then(({ indexedVariables, namedVariables }) => (<DebugProtocol.Variable>{\n            name,\n            value,\n            type: utils.uppercaseFirstLetter(object.type),\n            variablesReference,\n            indexedVariables,\n            namedVariables,\n            evaluateName\n        }));\n    }\n\n    public async propertyDescriptorToVariable(propDesc: Crdp.Runtime.PropertyDescriptor, owningObjectId?: string, parentEvaluateName?: string): Promise<DebugProtocol.Variable> {\n        if (propDesc.get) {\n            // Getter\n            const grabGetterValue = 'function remoteFunction(propName) { return this[propName]; }';\n\n            let response: Crdp.Runtime.CallFunctionOnResponse;\n            try {\n                response = await this.chrome.Runtime.callFunctionOn({\n                    objectId: owningObjectId,\n                    functionDeclaration: grabGetterValue,\n                    arguments: [{ value: propDesc.name }]\n                });\n            } catch (error) {\n                logger.error(`Error evaluating getter for '{propDesc.name}' - {error.toString()}`);\n                return { name: propDesc.name, value: error.toString(), variablesReference: 0 };\n            }\n\n            if (response.exceptionDetails) {\n                // Not an error, getter could be `get foo() { throw new Error('bar'); }`\n                const exceptionMessage = ChromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                logger.verbose('Exception thrown evaluating getter - ' + exceptionMessage);\n                return { name: propDesc.name, value: exceptionMessage, variablesReference: 0 };\n            } else {\n                return this.remoteObjectToVariable(propDesc.name, response.result, parentEvaluateName);\n            }\n        } else if (propDesc.set) {\n            // setter without a getter, unlikely\n            return { name: propDesc.name, value: 'setter', variablesReference: 0 };\n        } else {\n            // Non getter/setter\n            return this.internalPropertyDescriptorToVariable(propDesc, parentEvaluateName);\n        }\n    }\n\n    private getArrayNumPropsByEval(objectId: string): Promise<IPropCount> {\n        // +2 for __proto__ and length\n        const getNumPropsFn = `function() { return [this.length, Object.keys(this).length - this.length + 2]; }`;\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getBufferNumPropsByEval(objectId: string): Promise<IPropCount> {\n        // +2 for __proto__ and length\n        // Object.keys doesn't return other props from a Buffer\n        const getNumPropsFn = `function() { return [this.length, 0]; }`;\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getCollectionNumPropsByEval(objectId: string): Promise<IPropCount> {\n        const getNumPropsFn = `function() { return [0, Object.keys(this).length + 1]; }`; // +1 for [[Entries]];\n        return this.getNumPropsByEval(objectId, getNumPropsFn);\n    }\n\n    private getNumPropsByEval(objectId: string, getNumPropsFn: string): Promise<IPropCount> {\n        return this.chrome.Runtime.callFunctionOn({\n            objectId,\n            functionDeclaration: getNumPropsFn,\n            silent: true,\n            returnByValue: true\n        }).then(response => {\n            if (response.exceptionDetails) {\n                const errMsg = ChromeUtils.errorMessageFromExceptionDetails(response.exceptionDetails);\n                return Promise.reject<IPropCount>(errors.errorFromEvaluate(errMsg));\n            } else if (response.result) {\n                const resultProps = response.result.value;\n                if (resultProps.length !== 2) {\n                    return Promise.reject<IPropCount>(errors.errorFromEvaluate('Did not get expected props, got ' + JSON.stringify(resultProps)));\n                }\n\n                return { indexedVariables: resultProps[0], namedVariables: resultProps[1] };\n            } else {\n                return {\n                    indexedVariables: undefined,\n                    namedVariables: undefined\n                };\n            }\n        },\n        error => Promise.reject<IPropCount>(errors.errorFromEvaluate(error.message)));\n    }\n\n    public async remoteObjectToVariable(name: string, object: Crdp.Runtime.RemoteObject, parentEvaluateName?: string, stringify = true, context: VariableContext = 'variables'): Promise<DebugProtocol.Variable> {\n        name = name || '\"\"';\n\n        if (object) {\n            if (object.type === 'object') {\n                return this.createObjectVariable(name, object, parentEvaluateName, context);\n            } else if (object.type === 'function') {\n                return variables.createFunctionVariable(name, object, context, this._variableHandles, parentEvaluateName);\n            } else {\n                return variables.createPrimitiveVariable(name, object, parentEvaluateName, stringify);\n            }\n        } else {\n            return variables.createPrimitiveVariableWithValue(name, '', parentEvaluateName);\n        }\n    }\n\n    private internalPropertyDescriptorToVariable(propDesc: Crdp.Runtime.InternalPropertyDescriptor, parentEvaluateName: string): Promise<DebugProtocol.Variable> {\n        return this.remoteObjectToVariable(propDesc.name, propDesc.value, parentEvaluateName);\n    }\n\n}\n"],"sourceRoot":"../.."}