{"version":3,"sources":["../src/chrome/crdpMultiplexing/webSocketToLikeSocketProxy.ts"],"names":[],"mappings":";AAAA;;4DAE4D;;AAE5D,6DAA6C;AAC7C,gCAAgC;AAGhC;IAII,YAAoB,KAAa,EAAU,OAAmB;QAA1C,UAAK,GAAL,KAAK,CAAQ;QAAU,YAAO,GAAP,OAAO,CAAY;QAFtD,8BAAyB,GAAc,IAAI,CAAC;IAEc,CAAC;IAE5D,KAAK;QACR,IAAI,CAAC,OAAO,GAAG,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE;YAC3D,4BAAM,CAAC,GAAG,CAAC,4BAA4B,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YAC1B,4BAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE;gBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,yBAAyB,KAAK,IAAI,CAAC,CAAC,CAAC;oBAC1C,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,CAAC;oBACvC,4BAAM,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;gBACnD,CAAC;gBAED,MAAM,CAAC,EAAE,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC,EAAE;YAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,yBAAyB,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC1C,eAAe,CAAC,KAAK,EAAE,CAAC;gBACxB,MAAM,KAAK,CAAC,qEAAqE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;YACnG,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,yBAAyB,GAAG,eAAe,CAAC;gBACjD,4BAAM,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;YACvD,CAAC;YAED,eAAe,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;gBACjC,4BAAM,CAAC,GAAG,CAAC,kCAAkC,IAAI,EAAE,CAAC,CAAC;gBACrD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;YAEH,eAAe,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBAC7B,4BAAM,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;gBACxD,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;gBAC9B,4BAAM,CAAC,GAAG,CAAC,kCAAkC,IAAI,EAAE,CAAC,CAAC;gBACrD,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAhDD,gEAgDC","file":"webSocketToLikeSocketProxy.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { logger } from 'vscode-debugadapter';\nimport * as WebSocket from 'ws';\nimport { LikeSocket } from 'noice-json-rpc';\n\nexport class WebSocketToLikeSocketProxy {\n    private _server: WebSocket.Server;\n    private _currentlyOpenedWebSocket: WebSocket = null;\n\n    constructor(private _port: number, private _socket: LikeSocket) { }\n\n    public start(): void {\n        this._server = new WebSocket.Server({ port: this._port }, () => {\n            logger.log(`CRDP Proxy listening on: ${this._port}`);\n        });\n\n        this._socket.on('close', () => {\n            logger.log('CRDP Proxy shutting down');\n            this._server.close(() => {\n                if (this._currentlyOpenedWebSocket !== null) {\n                    this._currentlyOpenedWebSocket.close();\n                    logger.log('CRDP Proxy succesfully shut down');\n                }\n\n                return {};\n            });\n        });\n\n        this._server.on('connection', openedWebSocket => {\n            if (this._currentlyOpenedWebSocket !== null) {\n                openedWebSocket.close();\n                throw Error(`CRDP Proxy: Only one websocket is supported by the server on port ${this._port}`);\n            } else {\n                this._currentlyOpenedWebSocket = openedWebSocket;\n                logger.log(`CRDP Proxy accepted a new connection`);\n            }\n\n            openedWebSocket.on('message', data => {\n                logger.log(`CRDP Proxy - Client to Target: ${data}`);\n                this._socket.send(data.toString());\n            });\n\n            openedWebSocket.on('close', () => {\n                logger.log('CRDP Proxy - Client closed the connection');\n                this._currentlyOpenedWebSocket = null;\n            });\n\n            this._socket.on('message', data => {\n                logger.log(`CRDP Proxy - Target to Client: ${data}`);\n                openedWebSocket.send(data);\n            });\n        });\n    }\n}\n"],"sourceRoot":"../../.."}