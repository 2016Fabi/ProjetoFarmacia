{"version":3,"sources":["../src/chrome/chromeUtils.ts"],"names":[],"mappings":"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","file":"chromeUtils.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as url from 'url';\nimport * as path from 'path';\nimport { Protocol as Crdp } from 'devtools-protocol';\nimport { logger } from 'vscode-debugadapter';\n\nimport * as utils from '../utils';\nimport { ITarget } from './chromeConnection';\nimport { IPathMapping } from '../debugAdapterInterfaces';\nimport { pathToRegex } from '../utils';\nimport { isInternalRemotePath } from '../remoteMapper';\nimport { Socket } from 'net';\nimport * as errors from '../errors';\n\n/**\n * Takes the path component of a target url (starting with '/') and applies pathMapping\n */\nexport function applyPathMappingsToTargetUrlPath(scriptUrlPath: string, pathMapping: IPathMapping): string {\n    if (!pathMapping) {\n        return '';\n    }\n\n    if (!scriptUrlPath || !scriptUrlPath.startsWith('/')) {\n        return '';\n    }\n\n    const mappingKeys = Object.keys(pathMapping)\n        .sort((a, b) => b.length - a.length);\n    for (let pattern of mappingKeys) {\n        // empty pattern match nothing use / to match root\n        if (!pattern) {\n            continue;\n        }\n\n        const mappingRHS = pathMapping[pattern];\n        if (pattern[0] !== '/') {\n            logger.log(`PathMapping keys should be absolute: ${pattern}`);\n            pattern = '/' + pattern;\n        }\n\n        if (pathMappingPatternMatchesPath(pattern, scriptUrlPath)) {\n            return toClientPath(pattern, mappingRHS, scriptUrlPath);\n        }\n    }\n\n    return '';\n}\n\nfunction pathMappingPatternMatchesPath(pattern: string, scriptPath: string): boolean {\n    if (pattern === scriptPath) {\n        return true;\n    }\n\n    if (!pattern.endsWith('/')) {\n        // Don't match /foo with /foobar/something\n        pattern += '/';\n    }\n\n    return scriptPath.startsWith(pattern);\n}\n\nexport function applyPathMappingsToTargetUrl(scriptUrl: string, pathMapping: IPathMapping): string {\n    const parsedUrl = url.parse(scriptUrl);\n    if (!parsedUrl.protocol || parsedUrl.protocol.startsWith('file') || !parsedUrl.pathname) {\n        // Skip file: URLs and paths, and invalid things\n        return '';\n    }\n\n    return applyPathMappingsToTargetUrlPath(parsedUrl.pathname, pathMapping);\n}\n\nfunction toClientPath(pattern: string, mappingRHS: string, scriptPath: string): string {\n    const rest = decodeURIComponent(scriptPath.substring(pattern.length));\n    const mappedResult = rest ?\n        utils.properJoin(mappingRHS, rest) :\n        mappingRHS;\n\n    return mappedResult;\n}\n\n/**\n * Maps a url from target to an absolute local path, if it exists.\n * If not given an absolute path (with file: prefix), searches the current working directory for a matching file.\n * http://localhost/scripts/code.js => d:/app/scripts/code.js\n * file:///d:/scripts/code.js => d:/scripts/code.js\n */\nexport async function targetUrlToClientPath(aUrl: string, pathMapping: IPathMapping): Promise<string> {\n    if (!aUrl) {\n        return '';\n    }\n\n    // If the url is an absolute path to a file that exists, return it without file:///.\n    // A remote absolute url (cordova) will still need the logic below.\n    const canonicalUrl = utils.canonicalizeUrl(aUrl);\n    if (utils.isFileUrl(aUrl)) {\n        if (await utils.exists(canonicalUrl)) {\n            return canonicalUrl;\n        }\n\n        const networkPath = utils.fileUrlToNetworkPath(aUrl);\n        if (networkPath !== aUrl && await utils.exists(networkPath)) {\n            return networkPath;\n        }\n    }\n\n    // Search the filesystem under the webRoot for the file that best matches the given url\n    let pathName = url.parse(canonicalUrl).pathname;\n    if (!pathName || pathName === '/') {\n        return '';\n    }\n\n    // Dealing with the path portion of either a url or an absolute path to remote file.\n    const pathParts = pathName\n        .replace(/^\\//, '') // Strip leading /\n        .split(/[\\/\\\\]/);\n    while (pathParts.length > 0) {\n        const joinedPath = '/' + pathParts.join('/');\n        const clientPath = applyPathMappingsToTargetUrlPath(joinedPath, pathMapping);\n        if (isInternalRemotePath(clientPath)) {\n            return clientPath;\n        } else if (clientPath && await utils.exists(clientPath)) {\n            return utils.canonicalizeUrl(clientPath);\n        }\n\n        pathParts.shift();\n    }\n\n    return '';\n}\n\n/**\n * Convert a RemoteObject to a value+variableHandleRef for the client.\n * TODO - Delete after Microsoft/vscode#12019!!\n */\nexport function remoteObjectToValue(object: Crdp.Runtime.RemoteObject, stringify = true): { value: string, variableHandleRef?: string } {\n    let value = '';\n    let variableHandleRef: string;\n\n    if (object) {\n        if (object.type === 'object') {\n            if (object.subtype === 'null') {\n                value = 'null';\n            } else {\n                // If it's a non-null object, create a variable reference so the client can ask for its props\n                variableHandleRef = object.objectId;\n                value = object.description;\n            }\n        } else if (object.type === 'undefined') {\n            value = 'undefined';\n        } else if (object.type === 'function') {\n            const firstBraceIdx = object.description.indexOf('{');\n            if (firstBraceIdx >= 0) {\n                value = object.description.substring(0, firstBraceIdx) + '{ … }';\n            } else {\n                const firstArrowIdx = object.description.indexOf('=>');\n                value = firstArrowIdx >= 0 ?\n                    object.description.substring(0, firstArrowIdx + 2) + ' …' :\n                    object.description;\n            }\n        } else {\n            // The value is a primitive value, or something that has a description (not object, primitive, or undefined). And force to be string\n            if (typeof object.value === 'undefined') {\n                value = object.description;\n            } else if (object.type === 'number') {\n                // .value is truncated, so use .description, the full string representation\n                // Should be like '3' or 'Infinity'.\n                value = object.description;\n            } else {\n                value = stringify ? JSON.stringify(object.value) : object.value;\n            }\n        }\n    }\n\n    return { value, variableHandleRef };\n}\n\n/**\n * Returns the targets from the given list that match the targetUrl, which may have * wildcards.\n * Ignores the protocol and is case-insensitive.\n */\nexport function getMatchingTargets(targets: ITarget[], targetUrlPattern: string): ITarget[] {\n    const standardizeMatch = (aUrl: string) => {\n        aUrl = aUrl.toLowerCase();\n        if (utils.isFileUrl(aUrl)) {\n            // Strip file:///, if present\n            aUrl = utils.fileUrlToPath(aUrl);\n        } else if (utils.isURL(aUrl) && aUrl.indexOf('://') >= 0) {\n            // Strip the protocol, if present\n            aUrl = aUrl.substr(aUrl.indexOf('://') + 3);\n        }\n\n        // Remove optional trailing /\n        if (aUrl.endsWith('/')) aUrl = aUrl.substr(0, aUrl.length - 1);\n\n        return aUrl;\n    };\n\n    targetUrlPattern = standardizeMatch(targetUrlPattern);\n    targetUrlPattern = utils.escapeRegexSpecialChars(targetUrlPattern, '/*').replace(/\\*/g, '.*');\n\n    const targetUrlRegex = new RegExp('^' + targetUrlPattern + '$', 'g');\n    return targets.filter(target => !!standardizeMatch(target.url).match(targetUrlRegex));\n}\n\nconst PROTO_NAME = '__proto__';\nconst NUM_REGEX = /^[0-9]+$/;\nexport function compareVariableNames(var1: string, var2: string): number {\n    // __proto__ at the end\n    if (var1 === PROTO_NAME) {\n        return 1;\n    } else if (var2 === PROTO_NAME) {\n        return -1;\n    }\n\n    const isNum1 = !!var1.match(NUM_REGEX);\n    const isNum2 = !!var2.match(NUM_REGEX);\n\n    if (isNum1 && !isNum2) {\n        // Numbers after names\n        return 1;\n    } else if (!isNum1 && isNum2) {\n        // Names before numbers\n        return -1;\n    } else if (isNum1 && isNum2) {\n        // Compare numbers as numbers\n        const int1 = parseInt(var1, 10);\n        const int2 = parseInt(var2, 10);\n        return int1 - int2;\n    }\n\n    // Compare strings as strings\n    return var1.localeCompare(var2);\n}\n\nexport function remoteObjectToCallArgument(object: Crdp.Runtime.RemoteObject): Crdp.Runtime.CallArgument {\n    return {\n        objectId: object.objectId,\n        unserializableValue: object.unserializableValue,\n        value: object.value\n    };\n}\n\n/**\n * .exception is not present in Node < 6.6 - TODO this would be part of a generic solution for handling\n * protocol differences in the future.\n * This includes the error message and full stack\n */\nexport function descriptionFromExceptionDetails(exceptionDetails: Crdp.Runtime.ExceptionDetails): string {\n    let description: string;\n    if (exceptionDetails.exception) {\n        // Take exception object description, or if a value was thrown, the value\n        description = exceptionDetails.exception.description ||\n            'Error: ' + exceptionDetails.exception.value;\n    } else {\n        description = exceptionDetails.text;\n    }\n\n    return description || '';\n}\n\n/**\n * Get just the error message from the exception details - the first line without the full stack\n */\nexport function errorMessageFromExceptionDetails(exceptionDetails: Crdp.Runtime.ExceptionDetails): string {\n    let description = descriptionFromExceptionDetails(exceptionDetails);\n    const newlineIdx = description.indexOf('\\n');\n    if (newlineIdx >= 0) {\n        description = description.substr(0, newlineIdx);\n    }\n\n    return description;\n}\n\nexport function getEvaluateName(parentEvaluateName: string, name: string): string {\n    if (!parentEvaluateName) return name;\n\n    let nameAccessor: string;\n    if (/^[a-zA-Z_$][a-zA-Z_$0-9]*$/.test(name)) {\n        nameAccessor = '.' + name;\n    } else if (/^\\d+$/.test(name)) {\n        nameAccessor = `[${name}]`;\n    } else {\n        nameAccessor = `[${JSON.stringify(name)}]`;\n    }\n\n    return parentEvaluateName + nameAccessor;\n}\n\nexport function selectBreakpointLocation(lineNumber: number, columnNumber: number, locations: Crdp.Debugger.BreakLocation[]): Crdp.Debugger.BreakLocation {\n    for (let i = locations.length - 1; i >= 0; i--) {\n        if (locations[i].columnNumber <= columnNumber) {\n            return locations[i];\n        }\n    }\n\n    return locations[0];\n}\n\nexport const EVAL_NAME_PREFIX = 'VM';\n\nexport function isEvalScript(scriptPath: string): boolean {\n    return scriptPath.startsWith(EVAL_NAME_PREFIX);\n}\n\n/* Constructs the regex for files to enable break on load\nFor example, for a file index.js the regex will match urls containing index.js, index.ts, abc/index.ts, index.bin.js etc\nIt won't match index100.js, indexabc.ts etc */\nexport function getUrlRegexForBreakOnLoad(url: string): string {\n    const fileNameWithoutFullPath = path.parse(url).base;\n    const fileNameWithoutExtension = path.parse(fileNameWithoutFullPath).name;\n    const escapedFileName = pathToRegex(fileNameWithoutExtension);\n    return '.*[\\\\\\\\\\\\/]' + escapedFileName + '([^A-z^0-9].*)?$';\n}\n\n/**\n * Checks if a given tcp port is currently in use (more accurately, is there a server socket accepting connections on that port)\n * @param port The port to check\n * @param host Optional host, defaults to 127.0.0.1\n * @param timeout Timeout for the socket connect attempt\n * @returns True if a server socket is listening on the given port, false otherwise\n */\nexport async function isPortInUse(port: number, host = '127.0.0.1', timeout = 400): Promise<boolean> {\n    // Basically just create a socket and try to connect on that port, if we can connect, it's open\n    return new Promise<boolean>((resolve, _reject) => {\n        const socket = new Socket();\n        function createCallback(inUse: boolean) {\n            return () => {\n                resolve(inUse);\n                socket.removeAllListeners();\n                socket.destroy();\n            };\n        }\n\n        socket.setTimeout(timeout);\n        socket.on('connect', createCallback(true));\n        socket.on('timeout', createCallback(false));\n        socket.on('error', createCallback(false));\n        socket.connect(port, host);\n    });\n}\n\n/**\n * Get the port on which chrome was launched when passed \"--remote-debugging-port=0\"\n * @param userDataDir The profile data directory for the Chrome instance to check\n * @throws If reading the port failed for any reason\n */\nexport async function getLaunchedPort(userDataDir: string): Promise<number> {\n    const activePortFilePath = path.join(userDataDir, 'DevToolsActivePort');\n    try {\n        const activePortArgs = await utils.readFileP(activePortFilePath, 'utf-8');\n        const [ portStr ] = activePortArgs.split('\\n'); // chrome uses \\n regardless of platform in this file\n        const port = parseInt(portStr, 10);\n        if (isNaN(port)) return Promise.reject(errors.activePortFileContentsInvalid(activePortFilePath, activePortArgs));\n        return port;\n    } catch (err) {\n        return Promise.reject(errors.failedToReadPortFromUserDataDir(userDataDir, err));\n    }\n}\n"],"sourceRoot":"../.."}