{"version":3,"sources":["../src/executionTimingsReporter.ts"],"names":[],"mappings":"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","file":"executionTimingsReporter.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { HighResTimer, calculateElapsedTime } from './utils';\nimport { EventEmitter } from 'events';\n\nexport type TimingsReport = {[stepName: string]: [number] | number};\n\nexport const stepStartedEventName = 'stepStarted';\nexport const milestoneReachedEventName = 'milestoneReached';\nexport const stepCompletedEventName = 'stepCompleted';\nexport const requestCompletedEventName = 'requestCompleted';\n\nexport interface IStepStartedEventArguments {\n    stepName: string;\n}\n\nexport interface IMilestoneReachedEventArguments {\n    milestoneName: string;\n}\n\nexport interface IStepCompletedEventArguments {\n    stepName: string;\n}\n\nexport interface IRequestCompletedEventArguments {\n    requestName: string;\n    startTime: number;\n    timeTakenInMilliseconds: number;\n}\n\nexport interface IObservableEvents<T> { // T is an interface that declares the on methods (listeners) that we can subscribe to\n    events: T;\n}\n\nexport interface IStepStartedEventsEmitter {\n    on(event: 'stepStarted', listener: (args: IStepStartedEventArguments) => void): this;\n    on(event: 'milestoneReached', listener: (args: IMilestoneReachedEventArguments) => void): this;\n    removeListener(event: 'stepStarted', listener: (args: IStepStartedEventArguments) => void): this;\n    removeListener(event: 'milestoneReached', listener: (args: IMilestoneReachedEventArguments) => void): this;\n}\n\nexport interface FinishedStartingUpEventArguments {\n    requestedContentWasDetected: boolean;\n    reasonForNotDetected: string;\n}\n\nexport interface IFinishedStartingUpEventsEmitter {\n    on(event: 'finishedStartingUp', listener: (args: FinishedStartingUpEventArguments) => void): this;\n    once(event: 'finishedStartingUp', listener: (args: FinishedStartingUpEventArguments) => void): this;\n    removeListener(event: 'finishedStartingUp', listener: () => void): this;\n    removeListener(event: 'finishedStartingUp', listener: () => void): this;\n}\n\nexport class StepProgressEventsEmitter extends EventEmitter implements IStepStartedEventsEmitter, IFinishedStartingUpEventsEmitter {\n    constructor(private readonly _nestedEmitters: IStepStartedEventsEmitter[] = [] as IStepStartedEventsEmitter[]) {\n        super();\n    }\n\n    public emitStepStarted(stepName: string): void {\n        this.emit(stepStartedEventName, { stepName: stepName } as IStepStartedEventArguments);\n    }\n\n    public emitMilestoneReached(milestoneName: string): void {\n        this.emit(milestoneReachedEventName, { milestoneName: milestoneName } as IMilestoneReachedEventArguments);\n    }\n\n    public emitStepCompleted(stepName: string): void {\n        this.emit(stepCompletedEventName, { stepName: stepName } as IStepCompletedEventArguments);\n    }\n\n    public emitRequestCompleted(requestName: string, requestStartTime: number, timeTakenByRequestInMilliseconds: number): void {\n        this.emit(requestCompletedEventName, { requestName: requestName, startTime: requestStartTime, timeTakenInMilliseconds: timeTakenByRequestInMilliseconds } as IRequestCompletedEventArguments);\n    }\n\n    public on(event: string, listener: (...args: any[]) => void): this {\n        super.on(event, listener);\n        this._nestedEmitters.forEach(nestedEmitter => nestedEmitter.on(event as any, listener as any));\n        return this;\n    }\n\n    public removeListener(event: string, listener: (...args: any[]) => void): this {\n        super.removeListener(event, listener);\n        this._nestedEmitters.forEach(nestedEmitter => nestedEmitter.removeListener(event as any, listener as any));\n        return this;\n    }\n}\n\nclass SubscriptionManager {\n    private _removeSubscriptionActions = [] as (() => void)[];\n\n    public on(eventEmitter: EventEmitter, event: string | symbol, listener: (...args: any[]) => void): void {\n        eventEmitter.on(event, listener);\n        this._removeSubscriptionActions.push(() => eventEmitter.removeListener(event, listener));\n    }\n\n    public removeAll(): void {\n        for (const removeSubscriptionAction of this._removeSubscriptionActions) {\n            removeSubscriptionAction();\n        }\n\n        this._removeSubscriptionActions = [] as (() => void)[];\n    }\n}\n\nexport interface IAllRequestProperties {\n    [propertyName: string]: number[];\n}\n\nexport class ExecutionTimingsReporter {\n    private readonly _allStartTime: HighResTimer;\n    private readonly _eventsExecutionTimesInMilliseconds: {[stepName: string]: [number]} = {};\n    private readonly _stepsList = [] as string[];\n    private readonly _subscriptionManager = new SubscriptionManager();\n    private readonly _requestProperties = {} as IAllRequestProperties;\n\n    private _currentStepStartTime: HighResTimer;\n\n    /* __GDPR__FRAGMENT__\n       \"StepNames\" : {\n          \"BeforeFirstStep\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n       }\n     */\n    private _currentStepName = 'BeforeFirstStep';\n\n    constructor() {\n        this._currentStepStartTime = this._allStartTime = process.hrtime();\n    }\n\n    private recordPreviousStepAndConfigureNewStep(newStepName: string): void {\n        this.recordTimeTaken(this._currentStepName, this._currentStepStartTime);\n        this._stepsList.push(this._currentStepName);\n        this._currentStepStartTime = process.hrtime();\n        this._currentStepName = newStepName;\n    }\n\n    private recordTimeTaken(eventName: string, sinceWhen: HighResTimer): void {\n        const timeTakenInMilliseconds = calculateElapsedTime(sinceWhen);\n        this.addElementToArrayProperty(this._eventsExecutionTimesInMilliseconds, eventName, timeTakenInMilliseconds);\n    }\n\n    private recordTotalTimeUntilMilestone(milestoneName: string): void {\n        this.recordTimeTaken(milestoneName, this._allStartTime);\n    }\n\n    public generateReport(): {[stepName: string]: [number] | number} {\n        /* __GDPR__FRAGMENT__\n           \"StepNames\" : {\n              \"AfterLastStep\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n           }\n         */\n        this.recordPreviousStepAndConfigureNewStep('AfterLastStep');\n        this._subscriptionManager.removeAll(); // Remove all subscriptions so we don't get any new events\n\n        /* __GDPR__FRAGMENT__\n           \"ReportProps\" : {\n              \"Steps\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n              \"All\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n              \"${wildcard}\": [\n                 {\n                    \"${prefix}\": \"Request.\",\n                    \"${classification}\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                 }\n              ],\n              \"${include}\": [ \"${RequestProperties}\", \"${StepNames}\" ]\n           }\n         */\n        return Object.assign({},\n            {\n                Steps: this._stepsList,\n                All: calculateElapsedTime(this._allStartTime)\n            },\n            this._requestProperties,\n            this._eventsExecutionTimesInMilliseconds);\n    }\n\n    public recordRequestCompleted(requestName: string, startTime: number, timeTakenInMilliseconds: number): void {\n        /* __GDPR__FRAGMENT__\n           \"RequestProperties\" : {\n              \"${wildcard}\": [\n                 {\n                    \"${prefix}\": \"Request.\",\n                    \"${classification}\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                 }\n              ]\n           }\n         */\n        const propertyPrefix = `Request.${requestName}.`;\n        this.addElementToArrayProperty(this._requestProperties, propertyPrefix + 'startTime', startTime);\n        this.addElementToArrayProperty(this._requestProperties, propertyPrefix + 'timeTakenInMilliseconds', timeTakenInMilliseconds);\n    }\n\n    private addElementToArrayProperty<T>(object: {[propertyName: string]: T[]}, propertyName: string, elementToAdd: T): void {\n        const propertiesArray = object[propertyName] = object[propertyName] || [] as T[];\n        propertiesArray.push(elementToAdd);\n    }\n\n    public subscribeTo(eventEmitter: EventEmitter): void {\n        this._subscriptionManager.on(eventEmitter, stepStartedEventName, (args: IStepStartedEventArguments) => {\n            this.recordPreviousStepAndConfigureNewStep(args.stepName);\n        });\n\n        this._subscriptionManager.on(eventEmitter, milestoneReachedEventName, (args: IMilestoneReachedEventArguments) => {\n            this.recordTotalTimeUntilMilestone(args.milestoneName);\n        });\n\n        this._subscriptionManager.on(eventEmitter, stepCompletedEventName, (args: IStepCompletedEventArguments) => {\n            /* __GDPR__FRAGMENT__\n               \"StepNames\" : {\n                  \"${wildcard}\": [\n                     {\n                        \"${prefix}\": \"WaitingAfter\",\n                        \"${classification}\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n                     }\n                  ]\n               }\n             */\n            this.recordTotalTimeUntilMilestone(`WaitingAfter.${args.stepName}`);\n        });\n\n        this._subscriptionManager.on(eventEmitter, requestCompletedEventName, (args: IRequestCompletedEventArguments) => {\n            this.recordRequestCompleted(args.requestName, args.startTime, args.timeTakenInMilliseconds);\n        });\n    }\n}\n"],"sourceRoot":".."}