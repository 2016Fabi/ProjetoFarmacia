{"version":3,"sources":["../src/chrome/consoleHelper.ts"],"names":[],"mappings":"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","file":"consoleHelper.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { Protocol as Crdp } from 'devtools-protocol';\nimport * as Color from 'color';\nimport * as variables from './variables';\n\nexport function formatExceptionDetails(e: Crdp.Runtime.ExceptionDetails): string {\n    if (!e.exception) {\n        return `${e.text || 'Uncaught Error'}\\n${stackTraceToString(e.stackTrace)}`;\n    }\n\n    return (e.exception.className && e.exception.className.endsWith('Error') && e.exception.description) ||\n        (`Error: ${variables.getRemoteObjectPreview(e.exception)}\\n${stackTraceToString(e.stackTrace)}`);\n}\n\nexport const clearConsoleCode = '\\u001b[2J';\n\nexport function formatConsoleArguments(type: Crdp.Runtime.ConsoleAPICalledEvent['type'], args: Crdp.Runtime.RemoteObject[], stackTrace?: Crdp.Runtime.StackTrace): { args: Crdp.Runtime.RemoteObject[], isError: boolean } {\n    switch (type) {\n        case 'log':\n        case 'debug':\n        case 'info':\n        case 'error':\n        case 'warning':\n        case 'dir':\n        case 'timeEnd':\n        case 'count':\n            args = resolveParams(args);\n            break;\n        case 'assert':\n            const formattedParams = args.length ?\n                // 'assert' doesn't support format specifiers\n                resolveParams(args, /*skipFormatSpecifiers=*/true) :\n                [];\n\n            const assertMsg = (formattedParams[0] && formattedParams[0].type === 'string') ?\n                formattedParams.shift().value :\n                '';\n            let outputText = `Assertion failed: ${assertMsg}\\n` + stackTraceToString(stackTrace);\n\n            args = [{ type: 'string', value: outputText }, ...formattedParams];\n            break;\n        case 'startGroup':\n        case 'startGroupCollapsed':\n            let startMsg = '‹Start group›';\n            const formattedGroupParams = resolveParams(args);\n            const previewMessage = formattedGroupParams.find(x => x && x.type === 'string');\n            if (previewMessage) {\n                startMsg += ': ' + previewMessage.value;\n            }\n\n            args = [{ type: 'string', value: startMsg}, ...formattedGroupParams];\n            break;\n        case 'endGroup':\n            args = [{ type: 'string', value: '‹End group›' }];\n            break;\n        case 'trace':\n            args = [{ type: 'string', value: 'console.trace()\\n' + stackTraceToString(stackTrace) }];\n            break;\n        case 'clear':\n            args = [{ type: 'string', value: clearConsoleCode }];\n            break;\n        default:\n            // Some types we have to ignore\n            return null;\n    }\n\n    const isError = type === 'assert' || type === 'error';\n    return { args, isError };\n}\n\n/**\n * Collapse non-object arguments, and apply format specifiers (%s, %d, etc). Return a reduced a formatted list of RemoteObjects.\n */\nfunction resolveParams(args: Crdp.Runtime.RemoteObject[], skipFormatSpecifiers?: boolean): Crdp.Runtime.RemoteObject[] {\n    if (!args.length || args[0].objectId) {\n        // If the first arg is not text, nothing is going to happen here\n        return args;\n    }\n\n    // Find all %s, %i, etc in the first argument, which is always the main text. Strip %\n    let formatSpecifiers: string[];\n    const firstTextArg = args.shift();\n\n    // currentCollapsedStringArg is the accumulated text\n    let currentCollapsedStringArg = variables.getRemoteObjectPreview(firstTextArg, /*stringify=*/false) + '';\n    if (firstTextArg.type === 'string' && !skipFormatSpecifiers) {\n        formatSpecifiers = (currentCollapsedStringArg.match(/\\%[sidfoOc]/g) || [])\n            .map(spec => spec[1]);\n    } else {\n        formatSpecifiers = [];\n    }\n\n    const processedArgs: Crdp.Runtime.RemoteObject[] = [];\n    const pushStringArg = (strArg: string) => {\n        if (typeof strArg === 'string') {\n            processedArgs.push({ type: 'string', value: strArg });\n        }\n    };\n\n    // Collapse all text parameters, formatting properly if there's a format specifier\n    for (let argIdx = 0; argIdx < args.length; argIdx++) {\n        const arg = args[argIdx];\n\n        const formatSpec = formatSpecifiers.shift();\n        const formatted = formatArg(formatSpec, arg);\n\n        currentCollapsedStringArg = currentCollapsedStringArg || '';\n\n        if (typeof formatted === 'string') {\n            if (formatSpec) {\n                // If this param had a format specifier, search and replace it with the formatted param.\n                currentCollapsedStringArg = currentCollapsedStringArg.replace('%' + formatSpec, formatted);\n            } else {\n                currentCollapsedStringArg += (currentCollapsedStringArg ? ' ' + formatted : formatted);\n            }\n        } else if (formatSpec) {\n            // `formatted` is an object - split currentCollapsedStringArg around the current formatSpec and add the object\n            const curSpecIdx = currentCollapsedStringArg.indexOf('%' + formatSpec);\n            const processedPart = currentCollapsedStringArg.slice(0, curSpecIdx);\n            if (processedPart) {\n                pushStringArg(processedPart);\n            }\n\n            currentCollapsedStringArg = currentCollapsedStringArg.slice(curSpecIdx + 2);\n            processedArgs.push(formatted);\n        } else {\n            pushStringArg(currentCollapsedStringArg);\n            currentCollapsedStringArg = null;\n            processedArgs.push(formatted);\n        }\n    }\n\n    pushStringArg(currentCollapsedStringArg);\n\n    return processedArgs;\n}\n\nfunction formatArg(formatSpec: string, arg: Crdp.Runtime.RemoteObject): string | Crdp.Runtime.RemoteObject {\n    const paramValue = String(typeof arg.value !== 'undefined' ? arg.value : arg.description);\n\n    if (formatSpec === 's') {\n        return paramValue;\n    } else if (['i', 'd'].indexOf(formatSpec) >= 0) {\n        return Math.floor(+paramValue) + '';\n    } else if (formatSpec === 'f') {\n        return +paramValue + '';\n    } else if (formatSpec === 'c') {\n        return formatColorArg(arg);\n    } else if (formatSpec === 'O') {\n        if (arg.objectId) {\n            return arg;\n        } else {\n            return paramValue;\n        }\n    } else {\n        // No formatSpec, or unsupported formatSpec:\n        // %o - expandable DOM element\n        if (arg.objectId) {\n            return arg;\n        } else {\n            return paramValue;\n        }\n    }\n}\n\nfunction formatColorArg(arg: Crdp.Runtime.RemoteObject): string {\n    const cssRegex = /\\s*(.*?)\\s*:\\s*(.*?)\\s*(?:;|$)/g;\n\n    let escapedSequence: string | undefined;\n    let match = cssRegex.exec(arg.value);\n    while (match != null) {\n        if (match.length === 3) {\n            if (escapedSequence === undefined) {\n                // Some valid pattern appeared, initialize escapedSequence.\n                // If the pattern has no value like `color:`, then this should remain an empty string.\n                escapedSequence = '';\n            }\n\n            if (match[2]) {\n                switch (match[1]) {\n                    case 'color':\n                        const color = getAnsi16Color(match[2]);\n                        if (color) {\n                            escapedSequence += `;${color}`;\n                        }\n                        break;\n                    case 'background':\n                        const background = getAnsi16Color(match[2]);\n                        if (background) {\n                            escapedSequence += `;${background + 10}`;\n                        }\n                        break;\n                    case 'font-weight':\n                        if (match[2] === 'bold') {\n                            escapedSequence += ';1';\n                        }\n                        break;\n                    case 'text-decoration':\n                        if (match[2] === 'underline') {\n                            escapedSequence += ';4';\n                        }\n                        break;\n                    default:\n                    // css not mapped, skip\n                }\n            }\n        }\n\n        match = cssRegex.exec(arg.value);\n    }\n\n    if (typeof escapedSequence === 'string') {\n        escapedSequence = `\\x1b[0${escapedSequence}m`;\n    }\n\n    return escapedSequence;\n}\n\nfunction stackTraceToString(stackTrace: Crdp.Runtime.StackTrace): string {\n    if (!stackTrace) {\n        return '';\n    }\n\n    return stackTrace.callFrames\n        .map(frame => {\n            const fnName = frame.functionName || (frame.url ? '(anonymous)' : '(eval)');\n            const fileName = frame.url ? frame.url : 'eval';\n            return `    at ${fnName} (${fileName}:${frame.lineNumber + 1}:${frame.columnNumber})`;\n        })\n        .join('\\n');\n}\n\nfunction getAnsi16Color(colorString: string): number {\n    try {\n      // Color can parse hex and color names\n      const color = new Color(colorString);\n      return color.ansi16().object().ansi16;\n    } catch (ex) {\n      // Unable to parse Color\n      // For instance, \"inherit\" color will throw\n    }\n\n    return undefined;\n}\n"],"sourceRoot":"../.."}