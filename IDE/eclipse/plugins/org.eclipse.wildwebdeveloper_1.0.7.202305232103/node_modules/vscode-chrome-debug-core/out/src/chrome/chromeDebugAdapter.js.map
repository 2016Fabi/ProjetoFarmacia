{"version":3,"sources":["../src/chrome/chromeDebugAdapter.ts"],"names":[],"mappings":"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","file":"chromeDebugAdapter.js","sourceRoot":"../..","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { InitializedEvent, TerminatedEvent, ContinuedEvent, OutputEvent, Logger, logger, LoadedSourceEvent } from 'vscode-debugadapter';\n\nimport { ICommonRequestArgs, ILaunchRequestArgs, ISetBreakpointsArgs, ISetBreakpointsResponseBody, IStackTraceResponseBody,\n    IAttachRequestArgs, IScopesResponseBody, IVariablesResponseBody,\n    ISourceResponseBody, IThreadsResponseBody, IEvaluateResponseBody, IDebugAdapter,\n    ICompletionsResponseBody, IToggleSkipFileStatusArgs,\n    ISetBreakpointResult, IRestartRequestArgs, IInitializeRequestArgs, ITelemetryPropertyCollector, IGetLoadedSourcesResponseBody, TimeTravelRuntime, IExceptionInfoResponseBody, ISetVariableResponseBody } from '../debugAdapterInterfaces';\nimport { IChromeDebugAdapterOpts, ChromeDebugSession } from './chromeDebugSession';\nimport { ChromeConnection } from './chromeConnection';\nimport * as ChromeUtils from './chromeUtils';\nimport { Protocol as Crdp } from 'devtools-protocol';\nimport { ScopeContainer, isIndexedPropName } from './variables';\nimport * as variables from './variables';\nimport { formatConsoleArguments, formatExceptionDetails, clearConsoleCode } from './consoleHelper';\nimport { StoppedEvent2, ReasonType } from './stoppedEvent';\nimport { stackTraceWithoutLogpointFrame } from './internalSourceBreakpoint';\n\nimport * as errors from '../errors';\nimport * as utils from '../utils';\nimport { PromiseDefer, promiseDefer } from '../utils';\nimport { telemetry, BatchTelemetryReporter, IExecutionResultTelemetryProperties } from '../telemetry';\nimport { StepProgressEventsEmitter } from '../executionTimingsReporter';\n\nimport { LineColTransformer } from '../transformers/lineNumberTransformer';\nimport { BasePathTransformer } from '../transformers/basePathTransformer';\nimport { RemotePathTransformer } from '../transformers/remotePathTransformer';\nimport { BaseSourceMapTransformer } from '../transformers/baseSourceMapTransformer';\nimport { EagerSourceMapTransformer } from '../transformers/eagerSourceMapTransformer';\nimport { FallbackToClientPathTransformer } from '../transformers/fallbackToClientPathTransformer';\nimport { BreakOnLoadHelper } from './breakOnLoadHelper';\nimport * as sourceMapUtils from '../sourceMaps/sourceMapUtils';\n\nimport * as path from 'path';\n\nimport * as nls from 'vscode-nls';\nimport { mapRemoteClientToInternalPath, mapInternalSourceToRemoteClient } from '../remoteMapper';\nimport { Breakpoints } from './breakpoints';\nimport { VariablesManager } from './variablesManager';\nimport { StackFrames } from './stackFrames';\nimport { ScriptContainer } from './scripts';\nimport { SmartStepper } from './smartStep';\nimport { ScriptSkipper } from './scriptSkipping';\nlet localize = nls.loadMessageBundle();\n\nexport interface IPendingBreakpoint {\n    args: ISetBreakpointsArgs;\n    ids: number[];\n    requestSeq: number;\n    setWithPath: string;\n}\n\nexport type VariableContext = 'variables' | 'watch' | 'repl' | 'hover';\n\nexport type CrdpScript = Crdp.Debugger.ScriptParsedEvent;\n\nexport type CrdpDomain = string;\n\nexport type LoadedSourceEventReason = 'new' | 'changed' | 'removed';\n\nexport interface BreakpointSetResult {\n    isSet: boolean;\n    breakpoint: DebugProtocol.Breakpoint;\n}\n\nexport interface IOnPausedResult {\n    didPause: boolean;\n}\n\nexport interface Transformers {\n    lineColTransformer: LineColTransformer;\n    sourceMapTransformer: BaseSourceMapTransformer;\n    pathTransformer: BasePathTransformer;\n}\n\nexport abstract class ChromeDebugAdapter implements IDebugAdapter {\n    public static EVAL_NAME_PREFIX = ChromeUtils.EVAL_NAME_PREFIX;\n    public static EVAL_ROOT = '<eval>';\n\n    /**\n     * Names of variables and properties to be filtered out of the results\n     * from the adapter.\n     */\n    private static FILTERED_VARIABLE_NAMES = ['[[StableObjectId]]'];\n    private static SCRIPTS_COMMAND = '.scripts';\n    private static THREAD_ID = 1;\n    private static ASYNC_CALL_STACK_DEPTH = 4;\n\n    protected _session: ChromeDebugSession;\n    protected _domains = new Map<CrdpDomain, Crdp.Schema.Domain>();\n    private _clientAttached: boolean;\n    private _currentPauseNotification: Crdp.Debugger.PausedEvent;\n    private _exception: Crdp.Runtime.RemoteObject;\n    private _expectingResumedEvent: boolean;\n    protected _expectingStopReason: ReasonType;\n    private _waitAfterStep = Promise.resolve();\n\n    protected _chromeConnection: ChromeConnection;\n\n    protected _clientRequestedSessionEnd: boolean;\n    protected _hasTerminated: boolean;\n    protected _inShutdown: boolean;\n    protected _attachMode: boolean;\n    protected _launchAttachArgs: ICommonRequestArgs;\n    protected _port: number;\n\n    private _currentStep = Promise.resolve();\n    private _currentLogMessage = Promise.resolve();\n    private _pauseOnPromiseRejections = true;\n    protected _promiseRejectExceptionFilterEnabled = false;\n\n    private _columnBreakpointsEnabled: boolean;\n\n    private _smartStepEnabled: boolean;\n    private _smartStepCount = 0;\n    private _earlyScripts: Crdp.Debugger.ScriptParsedEvent[] = [];\n\n    private _initialSourceMapsP = Promise.resolve();\n    private _lastPauseState: { expecting: ReasonType; event: Crdp.Debugger.PausedEvent };\n    protected _breakOnLoadHelper: BreakOnLoadHelper | null;\n    // Queue to synchronize new source loaded and source removed events so that 'remove' script events\n    // won't be send before the corresponding 'new' event has been sent\n    private _sourceLoadedQueue: Promise<void> = Promise.resolve(null);\n\n    // Promises so ScriptPaused events can wait for ScriptParsed events to finish resolving breakpoints\n    private _scriptIdToBreakpointsAreResolvedDefer = new Map<string, PromiseDefer<void>>();\n\n    private _batchTelemetryReporter: BatchTelemetryReporter;\n\n    public readonly events: StepProgressEventsEmitter;\n\n    private _loadedSourcesByScriptId = new Map<Crdp.Runtime.ScriptId, CrdpScript>();\n\n    protected _isVSClient: boolean;\n\n    public get columnBreakpointsEnabled() { return this._columnBreakpointsEnabled; }\n    public get breakOnLoadHelper() { return this._breakOnLoadHelper; }\n\n    protected _scriptContainer: ScriptContainer;\n    protected _breakpoints: Breakpoints;\n    protected _variablesManager: VariablesManager;\n    protected _stackFrames: StackFrames;\n    protected _smartStepper: SmartStepper;\n    protected _scriptSkipper: ScriptSkipper;\n\n    private _transformers: Transformers;\n\n    public constructor({ chromeConnection, lineColTransformer, sourceMapTransformer, pathTransformer, targetFilter, breakpoints, scriptContainer }: IChromeDebugAdapterOpts,\n        session: ChromeDebugSession\n    ) {\n        telemetry.setupEventHandler(e => session.sendEvent(e));\n        this._batchTelemetryReporter = new BatchTelemetryReporter(telemetry);\n        this._session = session;\n        this._chromeConnection = new (chromeConnection || ChromeConnection)(undefined, targetFilter);\n        this.events = new StepProgressEventsEmitter(this._chromeConnection.events ? [this._chromeConnection.events] : []);\n\n        this._scriptContainer = new (scriptContainer || ScriptContainer)();\n\n        this._transformers = {\n            lineColTransformer: new (lineColTransformer || LineColTransformer)(this._session),\n            sourceMapTransformer: new (sourceMapTransformer || EagerSourceMapTransformer)(this._scriptContainer),\n            pathTransformer: new (pathTransformer || RemotePathTransformer)()\n        };\n\n        this._breakpoints = new (breakpoints || Breakpoints)(this, this._chromeConnection);\n        this._variablesManager = new VariablesManager(this._chromeConnection);\n        this._stackFrames = new StackFrames();\n        this._scriptSkipper = new ScriptSkipper(this._chromeConnection, this._transformers);\n\n        this.clearTargetContext();\n    }\n\n    public get chrome(): Crdp.ProtocolApi {\n        return this._chromeConnection.api;\n    }\n\n    /**\n     * @deprecated\n     */\n    public get scriptsById(): Map<Crdp.Runtime.ScriptId, CrdpScript> {\n        return this._scriptContainer.scriptsByIdMap;\n    }\n\n    public get committedBreakpointsByUrl(): Map<string, ISetBreakpointResult[]> {\n        return this._breakpoints.committedBreakpointsByUrl;\n    }\n\n    public get pathTransformer(): BasePathTransformer { return this._transformers.pathTransformer; }\n    public get sourceMapTransformer(): BaseSourceMapTransformer { return this._transformers.sourceMapTransformer; }\n    public get lineColTransformer(): LineColTransformer { return this._transformers.lineColTransformer; }\n\n    public get session() { return this._session; }\n\n    private get originProvider() { return (url: string) => this.getReadonlyOrigin(url);  }\n\n    /**\n     * Called on 'clearEverything' or on a navigation/refresh\n     */\n    protected clearTargetContext(): void {\n        this.sourceMapTransformer.clearTargetContext();\n\n        this._scriptContainer.reset();\n\n        if (this._breakpoints) {\n            this._breakpoints.reset();\n        }\n\n        this.pathTransformer.clearTargetContext();\n    }\n\n    /* __GDPR__\n        \"ClientRequest/initialize\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public initialize(args: IInitializeRequestArgs): DebugProtocol.Capabilities {\n        if (args.supportsMapURLToFilePathRequest) {\n            this._transformers.pathTransformer = new FallbackToClientPathTransformer(this._session);\n        }\n\n        this._isVSClient = args.clientID === 'visualstudio';\n        utils.setCaseSensitivePaths(!this._isVSClient);\n        this.sourceMapTransformer.isVSClient = this._isVSClient;\n\n        if (args.pathFormat !== 'path') {\n            throw errors.pathFormat();\n        }\n\n        if (args.locale) {\n            localize = nls.config({ locale: args.locale })();\n        }\n\n        // because session bypasses dispatchRequest\n        if (typeof args.linesStartAt1 === 'boolean') {\n            (<any>this)._clientLinesStartAt1 = args.linesStartAt1;\n        }\n        if (typeof args.columnsStartAt1 === 'boolean') {\n            (<any>this)._clientColumnsStartAt1 = args.columnsStartAt1;\n        }\n\n        const exceptionBreakpointFilters = [\n            {\n                label: localize('exceptions.all', 'All Exceptions'),\n                filter: 'all',\n                default: false\n            },\n            {\n                label: localize('exceptions.uncaught', 'Uncaught Exceptions'),\n                filter: 'uncaught',\n                default: false\n            }\n        ];\n        if (this._promiseRejectExceptionFilterEnabled) {\n            exceptionBreakpointFilters.push({\n                label: localize('exceptions.promise_rejects', 'Promise Rejects'),\n                filter: 'promise_reject',\n                default: false\n            });\n        }\n\n        // This debug adapter supports two exception breakpoint filters\n        return {\n            exceptionBreakpointFilters,\n            supportsConfigurationDoneRequest: true,\n            supportsSetVariable: true,\n            supportsConditionalBreakpoints: true,\n            supportsCompletionsRequest: true,\n            supportsHitConditionalBreakpoints: true,\n            supportsRestartFrame: true,\n            supportsExceptionInfoRequest: true,\n            supportsDelayedStackTraceLoading: true,\n            supportsValueFormattingOptions: true,\n            supportsEvaluateForHovers: true,\n            supportsLoadedSourcesRequest: true,\n            supportsBreakpointLocationsRequest: true\n        };\n    }\n\n    /* __GDPR__\n        \"ClientRequest/configurationDone\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public configurationDone(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public get breakOnLoadActive(): boolean {\n        return !!this._breakOnLoadHelper;\n    }\n\n    /* __GDPR__\n        \"ClientRequest/launch\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async launch(args: ILaunchRequestArgs, telemetryPropertyCollector?: ITelemetryPropertyCollector): Promise<void> {\n        this.commonArgs(args);\n\n        if (args.pathMapping) {\n            for (const urlToMap in args.pathMapping) {\n                args.pathMapping[urlToMap] = utils.canonicalizeUrl(args.pathMapping[urlToMap]);\n            }\n        }\n\n        this.sourceMapTransformer.launch(args);\n        await this.pathTransformer.launch(args);\n\n        if (!args.__restart) {\n            /* __GDPR__\n               \"debugStarted\" : {\n                  \"request\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                  \"args\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                  \"${include}\": [ \"${DebugCommonProperties}\" ]\n               }\n            */\n            telemetry.reportEvent('debugStarted', { request: 'launch', args: Object.keys(args) });\n        }\n    }\n\n    /* __GDPR__\n        \"ClientRequest/attach\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async attach(args: IAttachRequestArgs): Promise<void> {\n        this._attachMode = true;\n        this.commonArgs(args);\n        this.sourceMapTransformer.attach(args);\n        await this.pathTransformer.attach(args);\n\n        if (!args.port) {\n            args.port = 9229;\n        }\n\n        /* __GDPR__\n            \"debugStarted\" : {\n                \"request\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"args\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                \"${include}\": [ \"${DebugCommonProperties}\" ]\n            }\n        */\n        telemetry.reportEvent('debugStarted', { request: 'attach', args: Object.keys(args) });\n        await this.doAttach(args.port, args.url, args.address, args.timeout, args.websocketUrl, args.extraCRDPChannelPort);\n    }\n\n    protected commonArgs(args: ICommonRequestArgs): void {\n        let logToFile = false;\n        let logLevel: Logger.LogLevel;\n        if (args.trace === 'verbose') {\n            logLevel = Logger.LogLevel.Verbose;\n            logToFile = true;\n        } else if (args.trace) {\n            logLevel = Logger.LogLevel.Warn;\n            logToFile = true;\n        } else {\n            logLevel = Logger.LogLevel.Warn;\n        }\n\n        let logTimestamps = args.logTimestamps;\n\n        // The debug configuration provider should have set logFilePath on the launch config. If not, default to 'true' to use the\n        // \"legacy\" log file path from the CDA subclass\n        const logFilePath = args.logFilePath || logToFile;\n        logger.setup(logLevel, logFilePath, logTimestamps);\n\n        this._launchAttachArgs = args;\n\n        // Enable sourcemaps and async callstacks by default\n        args.sourceMaps = typeof args.sourceMaps === 'undefined' || args.sourceMaps;\n        args.showAsyncStacks = typeof args.showAsyncStacks === 'undefined' || args.showAsyncStacks;\n\n        this._smartStepper = new SmartStepper(this._launchAttachArgs.smartStep);\n\n        if (args.breakOnLoadStrategy && args.breakOnLoadStrategy !== 'off') {\n            this._breakOnLoadHelper = new BreakOnLoadHelper(this, args.breakOnLoadStrategy);\n        }\n\n        // Use hasOwnProperty to explicitly permit setting a falsy targetFilter.\n        if (args.hasOwnProperty('targetFilter')) {\n            this._chromeConnection.setTargetFilter(args.targetFilter);\n        }\n    }\n\n    public shutdown(): void {\n        this._batchTelemetryReporter.finalize();\n        this._inShutdown = true;\n        this._session.shutdown();\n    }\n\n    protected async terminateSession(reason: string, _disconnectArgs?: DebugProtocol.DisconnectArguments, restart?: IRestartRequestArgs): Promise<void> {\n        logger.log(`Terminated: ${reason}`);\n\n        if (!this._hasTerminated) {\n            logger.log(`Waiting for any pending steps or log messages.`);\n            await this._currentStep;\n            await this._currentLogMessage;\n            logger.log(`Current step and log messages complete`);\n\n            /* __GDPR__\n               \"debugStopped\" : {\n                  \"reason\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n                  \"${include}\": [ \"${DebugCommonProperties}\" ]\n               }\n             */\n            telemetry.reportEvent('debugStopped', { reason });\n            this._hasTerminated = true;\n            if (this._clientAttached || (this._launchAttachArgs && (<ILaunchRequestArgs>this._launchAttachArgs).noDebug)) {\n                this._session.sendEvent(new TerminatedEvent(restart));\n            }\n\n            if (this._chromeConnection.isAttached) {\n                this._chromeConnection.close();\n            }\n        }\n    }\n\n    /**\n     * Hook up all connection events\n     */\n    protected hookConnectionEvents(): void {\n        this.chrome.Debugger.on('paused', params => {\n            /* __GDPR__\n               \"target/notification/onPaused\" : {\n                  \"${include}\": [\n                      \"${IExecutionResultTelemetryProperties}\",\n                      \"${DebugCommonProperties}\"\n                    ]\n               }\n             */\n            this.runAndMeasureProcessingTime('target/notification/onPaused', async () => {\n                await this.onPaused(params);\n            });\n        });\n        this.chrome.Debugger.on('resumed', () => this.onResumed());\n        this.chrome.Debugger.on('scriptParsed', params => {\n            /* __GDPR__\n               \"target/notification/onScriptParsed\" : {\n                  \"${include}\": [\n                        \"${IExecutionResultTelemetryProperties}\",\n                        \"${DebugCommonProperties}\"\n                    ]\n               }\n             */\n            this.runAndMeasureProcessingTime('target/notification/onScriptParsed', () => {\n                return this.onScriptParsed(params);\n            });\n        });\n\n        this.chrome.Console.on('messageAdded', params => this.onMessageAdded(params));\n        this.chrome.Runtime.on('consoleAPICalled', params => this.onConsoleAPICalled(params));\n        this.chrome.Runtime.on('exceptionThrown', params => this.onExceptionThrown(params));\n        this.chrome.Runtime.on('executionContextsCleared', () => this.onExecutionContextsCleared());\n        this.chrome.Log.on('entryAdded', params => this.onLogEntryAdded(params));\n\n        this.chrome.Debugger.on('breakpointResolved', params => this._breakpoints.onBreakpointResolved(params, this._scriptContainer));\n\n        this._chromeConnection.onClose(() => this.terminateSession('websocket closed'));\n    }\n\n    private async runAndMeasureProcessingTime(notificationName: string, procedure: () => Promise<void>): Promise<void> {\n        const startTime = Date.now();\n        const startTimeMark = process.hrtime();\n        let properties: IExecutionResultTelemetryProperties = {\n            startTime: startTime.toString()\n        };\n\n        try {\n            await procedure();\n            properties.successful = 'true';\n        } catch (e) {\n            properties.successful = 'false';\n            properties.exceptionType = 'firstChance';\n            utils.fillErrorDetails(properties, e);\n        }\n\n        const elapsedTime = utils.calculateElapsedTime(startTimeMark);\n        properties.timeTakenInMilliseconds = elapsedTime.toString();\n\n        // Callers set GDPR annotation\n        this._batchTelemetryReporter.reportEvent(notificationName, properties);\n    }\n\n    /**\n     * Enable clients and run connection\n     */\n    protected runConnection(): Promise<void>[] {\n        return [\n            this.chrome.Console.enable()\n                .catch(() => { /* Specifically ignore a fail here since it's only for backcompat */ }),\n            utils.toVoidP(this.chrome.Debugger.enable()),\n            this.chrome.Runtime.enable(),\n            this.chrome.Log.enable()\n                .catch(() => { }), // Not supported by all runtimes\n            this._chromeConnection.run(),\n        ];\n    }\n\n    protected async doAttach(port: number, targetUrl?: string, address?: string, timeout?: number, websocketUrl?: string, extraCRDPChannelPort?: number): Promise<void> {\n        /* __GDPR__FRAGMENT__\n           \"StepNames\" : {\n              \"Attach\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n           }\n         */\n        this.events.emitStepStarted('Attach');\n        // Client is attaching - if not attached to the chrome target, create a connection and attach\n        this._clientAttached = true;\n        if (!this._chromeConnection.isAttached) {\n            if (websocketUrl) {\n                await this._chromeConnection.attachToWebsocketUrl(websocketUrl, extraCRDPChannelPort);\n            } else {\n                await this._chromeConnection.attach(address, port, targetUrl, timeout, extraCRDPChannelPort);\n            }\n\n            /* __GDPR__FRAGMENT__\n            \"StepNames\" : {\n                \"Attach.ConfigureDebuggingSession.Internal\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n            }\n            */\n            this.events.emitStepStarted('Attach.ConfigureDebuggingSession.Internal');\n\n            this._port = port;\n\n            this.hookConnectionEvents();\n\n            /* __GDPR__FRAGMENT__\n               \"StepNames\" : {\n                  \"Attach.ConfigureDebuggingSession.Target\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n               }\n             */\n            this.events.emitStepStarted('Attach.ConfigureDebuggingSession.Target');\n\n            // Make sure debugging domain is enabled before initializing the script skipper\n            await Promise.all(this.runConnection());\n\n            this._scriptSkipper.init(this._launchAttachArgs.skipFiles, this._launchAttachArgs.skipFileRegExps);\n\n            await this.initSupportedDomains();\n            const maxDepth = this._launchAttachArgs.showAsyncStacks ? ChromeDebugAdapter.ASYNC_CALL_STACK_DEPTH : 0;\n            try {\n                await this.chrome.Debugger.setAsyncCallStackDepth({ maxDepth });\n            } catch (e) {\n                // Not supported by older runtimes, ignore it.\n            }\n\n            if (this._breakOnLoadHelper) {\n                this._breakOnLoadHelper.setBrowserVersion((await this._chromeConnection.version).browser);\n            }\n\n            /* __GDPR__FRAGMENT__\n               \"StepNames\" : {\n                  \"Attach.ConfigureDebuggingSession.End\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n               }\n             */\n            this.events.emitStepStarted('Attach.ConfigureDebuggingSession.End');\n        }\n    }\n\n    private async initSupportedDomains(): Promise<void> {\n        try {\n            const domainResponse = await this.chrome.Schema.getDomains();\n            domainResponse.domains.forEach(domain => this._domains.set(<any>domain.name, domain));\n        } catch (e) {\n            // If getDomains isn't supported for some reason, skip this\n        }\n    }\n\n    /**\n     * This event tells the client to begin sending setBP requests, etc. Some consumers need to override this\n     * to send it at a later time of their choosing.\n     */\n    protected async sendInitializedEvent(): Promise<void> {\n        // Wait to finish loading sourcemaps from the initial scriptParsed events\n        if (this._initialSourceMapsP) {\n            const initialSourceMapsP = this._initialSourceMapsP;\n            this._initialSourceMapsP = null;\n\n            await initialSourceMapsP;\n\n            this._session.sendEvent(new InitializedEvent());\n            this.events.emitStepCompleted('NotifyInitialized');\n            await Promise.all(this._earlyScripts.map(script => this.sendLoadedSourceEvent(script)));\n            this._earlyScripts = null;\n        }\n    }\n\n    public doAfterProcessingSourceEvents(action: () => void): Promise<void> {\n        return this._sourceLoadedQueue = this._sourceLoadedQueue.then(action);\n    }\n\n    /**\n     * e.g. the target navigated\n     */\n    protected onExecutionContextsCleared(): Promise<void> {\n        const cachedScriptParsedEvents = Array.from(this._scriptContainer.loadedScripts);\n        this.clearTargetContext();\n        return this.doAfterProcessingSourceEvents(async () => { // This will not execute until all the on-flight 'new' source events have been processed\n            for (let scriptedParseEvent of cachedScriptParsedEvents) {\n                this.sendLoadedSourceEvent(scriptedParseEvent, 'removed');\n            }\n        });\n    }\n\n    protected async onPaused(notification: Crdp.Debugger.PausedEvent, expectingStopReason = this._expectingStopReason): Promise<IOnPausedResult> {\n        if (notification.asyncCallStackTraceId) {\n            await this.chrome.Debugger.pauseOnAsyncCall({ parentStackTraceId: notification.asyncCallStackTraceId });\n            await this.chrome.Debugger.resume();\n            return { didPause: false };\n        }\n\n        this._variablesManager.onPaused();\n        this._stackFrames.reset();\n        this._exception = undefined;\n        this._lastPauseState = { event: notification, expecting: expectingStopReason };\n        this._currentPauseNotification = notification;\n\n        // If break on load is active, we pass the notification object to breakonload helper\n        // If it returns true, we continue and return\n        if (this.breakOnLoadActive) {\n            let shouldContinue = await this._breakOnLoadHelper.handleOnPaused(notification);\n            if (shouldContinue) {\n                this.chrome.Debugger.resume()\n                    .catch(e => {\n                        logger.error('Failed to resume due to exception: ' + e.message);\n                    });\n                return { didPause: false };\n            }\n        }\n\n        // We can tell when we've broken on an exception. Otherwise if hitBreakpoints is set, assume we hit a\n        // breakpoint. If not set, assume it was a step. We can't tell the difference between step and 'break on anything'.\n        let reason: ReasonType;\n        let shouldSmartStep = false;\n        if (notification.reason === 'exception') {\n            reason = 'exception';\n            this._exception = notification.data;\n        } else if (notification.reason === 'promiseRejection') {\n            reason = 'promise_rejection';\n\n            // After processing smartStep and so on, check whether we are paused on a promise rejection, and should continue past it\n            if (this._promiseRejectExceptionFilterEnabled && !this._pauseOnPromiseRejections) {\n                this.chrome.Debugger.resume()\n                    .catch(() => { /* ignore failures */ });\n                return { didPause: false };\n            }\n\n            this._exception = notification.data;\n        } else if (notification.hitBreakpoints && notification.hitBreakpoints.length) {\n            reason = 'breakpoint';\n\n            const result = this._breakpoints.handleHitCountBreakpoints(expectingStopReason, notification.hitBreakpoints);\n            if (result) {\n                return result;\n            }\n\n        } else if (expectingStopReason) {\n            // If this was a step, check whether to smart step\n            reason = expectingStopReason;\n            shouldSmartStep = await this._shouldSmartStepCallFrame(this._currentPauseNotification.callFrames[0]);\n        } else {\n            reason = 'debugger_statement';\n        }\n\n        this._expectingStopReason = undefined;\n\n        if (shouldSmartStep) {\n            this._smartStepCount++;\n            await this.stepIn(false);\n            return { didPause: false };\n        } else {\n            if (this._smartStepCount > 0) {\n                logger.log(`SmartStep: Skipped ${this._smartStepCount} steps`);\n                this._smartStepCount = 0;\n            }\n\n            // Enforce that the stopped event is not fired until we've sent the response to the step that induced it.\n            // Also with a timeout just to ensure things keep moving\n            const sendStoppedEvent = () => {\n                return this._session.sendEvent(new StoppedEvent2(reason, /*threadId=*/ChromeDebugAdapter.THREAD_ID, this._exception));\n            };\n            await utils.promiseTimeout(this._currentStep, /*timeoutMs=*/300)\n                .then(sendStoppedEvent, sendStoppedEvent);\n\n            return { didPause: true };\n        }\n    }\n\n    /* __GDPR__\n        \"ClientRequest/exceptionInfo\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async exceptionInfo(args: DebugProtocol.ExceptionInfoArguments): Promise<IExceptionInfoResponseBody> {\n        if (args.threadId !== ChromeDebugAdapter.THREAD_ID) {\n            throw errors.invalidThread(args.threadId);\n        }\n\n        if (this._exception) {\n            const isError = this._exception.subtype === 'error';\n            const message = isError ? utils.firstLine(this._exception.description) : (this._exception.description || this._exception.value);\n            const formattedMessage = message && message.replace(/\\*/g, '\\\\*');\n            const response: IExceptionInfoResponseBody = {\n                exceptionId: this._exception.className || this._exception.type || 'Error',\n                breakMode: 'unhandled',\n                details: {\n                    stackTrace: this._exception.description && await this._stackFrames.mapFormattedException(this._exception.description, this._transformers),\n                    message,\n                    formattedDescription: formattedMessage, // VS workaround - see https://github.com/Microsoft/vscode/issues/34259\n                    typeName: this._exception.subtype || this._exception.type\n                }\n            };\n\n            return response;\n        } else {\n            throw errors.noStoredException();\n        }\n    }\n\n    protected onResumed(): void {\n        this._currentPauseNotification = null;\n\n        if (this._expectingResumedEvent) {\n            this._expectingResumedEvent = false;\n\n            // Need to wait to eval just a little after each step, because of #148\n            this._waitAfterStep = utils.promiseTimeout(null, 50);\n        } else {\n            let resumedEvent = new ContinuedEvent(ChromeDebugAdapter.THREAD_ID);\n            this._session.sendEvent(resumedEvent);\n        }\n    }\n\n    private async detectColumnBreakpointSupport(scriptId: Crdp.Runtime.ScriptId): Promise<void> {\n        this._columnBreakpointsEnabled = false; // So it isn't requested multiple times\n        try {\n            await this.chrome.Debugger.getPossibleBreakpoints({\n                start: { scriptId, lineNumber: 0, columnNumber: 0 },\n                end: { scriptId, lineNumber: 1, columnNumber: 0 },\n                restrictToFunction: false\n            });\n            this._columnBreakpointsEnabled = true;\n        } catch (e) {\n            this._columnBreakpointsEnabled = false;\n        }\n\n        this.lineColTransformer.columnBreakpointsEnabled = this._columnBreakpointsEnabled;\n    }\n\n    public getBreakpointsResolvedDefer(scriptId: string): PromiseDefer<void> {\n        const existingValue =  this._scriptIdToBreakpointsAreResolvedDefer.get(scriptId);\n        if (existingValue) {\n            return existingValue;\n        } else {\n            const newValue = promiseDefer<void>();\n            this._scriptIdToBreakpointsAreResolvedDefer.set(scriptId, newValue);\n            return newValue;\n        }\n    }\n\n    protected async onScriptParsed(script: Crdp.Debugger.ScriptParsedEvent): Promise<void> {\n        // The stack trace and hash can be large and the DA doesn't need it.\n        delete script.stackTrace;\n        delete script.hash;\n\n        const breakpointsAreResolvedDefer = this.getBreakpointsResolvedDefer(script.scriptId);\n        try {\n            this.doAfterProcessingSourceEvents(async () => { // This will block future 'removed' source events, until this processing has been completed\n                if (typeof this._columnBreakpointsEnabled === 'undefined') {\n                    if (!script.url.includes('internal/per_context')) {\n                        await this.detectColumnBreakpointSupport(script.scriptId);\n                        await this.sendInitializedEvent();\n                    }\n                }\n\n                if (this._earlyScripts) {\n                    this._earlyScripts.push(script);\n                } else {\n                    await this.sendLoadedSourceEvent(script);\n                }\n            });\n\n            if (script.url) {\n                script.url = utils.fixDriveLetter(script.url);\n            } else {\n                script.url = ChromeDebugAdapter.EVAL_NAME_PREFIX + script.scriptId;\n            }\n\n            this._scriptContainer.add(script);\n\n            const mappedUrl = await this.pathTransformer.scriptParsed(script.url);\n\n            const sourceMapsP = this.sourceMapTransformer.scriptParsed(mappedUrl, script.url, script.sourceMapURL).then(async sources => {\n                if (this._hasTerminated) {\n                    return undefined;\n                }\n\n                await this._breakpoints.handleScriptParsed(script, this._scriptContainer, mappedUrl, sources);\n                await this._scriptSkipper.resolveSkipFiles(script, mappedUrl, sources);\n            });\n\n            if (this._initialSourceMapsP) {\n                this._initialSourceMapsP = <Promise<any>>Promise.all([this._initialSourceMapsP, sourceMapsP]);\n            }\n            await sourceMapsP;\n\n            breakpointsAreResolvedDefer.resolve(); // By now no matter which code path we choose, resolving pending breakpoints should be finished, so trigger the defer\n        } catch (exception) {\n            breakpointsAreResolvedDefer.reject(exception);\n        }\n    }\n\n    protected async sendLoadedSourceEvent(script: Crdp.Debugger.ScriptParsedEvent, loadedSourceEventReason: LoadedSourceEventReason = 'new'): Promise<void> {\n        const origin = this.getReadonlyOrigin(script.url);\n        const source = await this._scriptContainer.scriptToSource(script, origin);\n\n        // This is a workaround for an edge bug, see https://github.com/Microsoft/vscode-chrome-debug-core/pull/329\n        switch (loadedSourceEventReason) {\n            case 'new':\n            case 'changed':\n                if (this._loadedSourcesByScriptId.get(script.scriptId)) {\n                    if (source.sourceReference) {\n                        // We only need to send changed events for dynamic scripts. The client tracks files on storage on it's own, so this notification is not needed\n                        loadedSourceEventReason = 'changed';\n                    } else {\n                        return; // VS is strict about the changed notifications, and it will fail if we send a changed notification for a file on storage, so we omit it on purpose\n                    }\n                } else {\n                    loadedSourceEventReason = 'new';\n                }\n                this._loadedSourcesByScriptId.set(script.scriptId, script);\n                break;\n            case 'removed':\n                if (!this._loadedSourcesByScriptId.delete(script.scriptId)) {\n                    telemetry.reportEvent('LoadedSourceEventError', { issue: 'Tried to remove non-existent script', scriptId: script.scriptId });\n                    return;\n                }\n                break;\n            default:\n                telemetry.reportEvent('LoadedSourceEventError', { issue: 'Unknown reason', reason: loadedSourceEventReason });\n        }\n\n        const scriptEvent = new LoadedSourceEvent(loadedSourceEventReason, source as any);\n\n        this._session.sendEvent(scriptEvent);\n    }\n\n    /* __GDPR__\n        \"ClientRequest/toggleSmartStep\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async toggleSmartStep(): Promise<void> {\n        this._smartStepEnabled = !this._smartStepEnabled;\n        this.onPaused(this._lastPauseState.event, this._lastPauseState.expecting);\n    }\n\n    /* __GDPR__\n        \"ClientRequest/toggleSkipFileStatus\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async toggleSkipFileStatus(args: IToggleSkipFileStatusArgs): Promise<void> {\n        if (args.path) {\n            args.path = utils.fileUrlToPath(args.path);\n            args.path = mapRemoteClientToInternalPath(args.path);\n        }\n\n        if (!await this.isInCurrentStack(args)) {\n            // Only valid for files that are in the current stack\n            const logName = args.path || this._scriptContainer.displayNameForSourceReference(args.sourceReference);\n            logger.log(`Can't toggle the skipFile status for ${logName} - it's not in the current stack.`);\n            return;\n        } else {\n            this._scriptSkipper.toggleSkipFileStatus(args, this._scriptContainer, this._transformers);\n            this.onPaused(this._lastPauseState.event, this._lastPauseState.expecting);\n        }\n    }\n\n    private async isInCurrentStack(args: IToggleSkipFileStatusArgs): Promise<boolean> {\n        const currentStack = await this.stackTrace({ threadId: undefined });\n\n        if (args.path) {\n            return currentStack.stackFrames.some(frame => frame.source && frame.source.path === args.path);\n        } else {\n            return currentStack.stackFrames.some(frame => frame.source && frame.source.sourceReference === args.sourceReference);\n        }\n    }\n\n    /* __GDPR__\n        \"ClientRequest/loadedSources\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async loadedSources(): Promise<IGetLoadedSourcesResponseBody> {\n        const sources = await Promise.all(Array.from(this._scriptContainer.loadedScripts)\n            .map(script => this._scriptContainer.scriptToSource(script, this.getReadonlyOrigin(script.url))));\n\n        return { sources: sources.sort((a, b) => a.path.localeCompare(b.path)) };\n    }\n\n    protected onConsoleAPICalled(event: Crdp.Runtime.ConsoleAPICalledEvent): void {\n        if (this._launchAttachArgs._suppressConsoleOutput) {\n            return;\n        }\n\n        const result = formatConsoleArguments(event.type, event.args, event.stackTrace);\n        const stack = stackTraceWithoutLogpointFrame(event.stackTrace);\n        if (result) {\n            this.logObjects(result.args, result.isError, stack);\n        }\n    }\n\n    private onLogEntryAdded(event: Crdp.Log.EntryAddedEvent): void {\n        // The Debug Console doesn't give the user a way to filter by level, just ignore 'verbose' logs\n        if (event.entry.level === 'verbose') {\n            return;\n        }\n\n        const args = event.entry.args || [];\n\n        let text = event.entry.text || '';\n        if (event.entry.url && !event.entry.stackTrace) {\n            if (text) {\n                text += ' ';\n            }\n\n            text += `[${event.entry.url}]`;\n        }\n\n        if (text) {\n            args.unshift({\n                type: 'string',\n                value: text\n            });\n        }\n\n        const type = event.entry.level === 'error' ? 'error' :\n            event.entry.level === 'warning' ? 'warning' :\n            'log';\n        const result = formatConsoleArguments(type, args, event.entry.stackTrace);\n        const stack = event.entry.stackTrace;\n        if (result) {\n            this.logObjects(result.args, result.isError, stack);\n        }\n    }\n\n    private async logObjects(objs: Crdp.Runtime.RemoteObject[], isError = false, stackTrace?: Crdp.Runtime.StackTrace): Promise<void> {\n        // This is an asynchronous method, so ensure that we handle one at a time so that they are sent out in the same order that they came in.\n        this._currentLogMessage = this._currentLogMessage\n            .then(async () => {\n                const category = isError ? 'stderr' : 'stdout';\n\n                // Shortcut the common log case to reduce unnecessary back and forth\n                let e: DebugProtocol.OutputEvent;\n                if (objs.length === 1 && objs[0].type === 'string') {\n                    let msg: string = objs[0].value;\n                    if (isError) {\n                        msg = await this._stackFrames.mapFormattedException(msg, this._transformers);\n                    }\n\n                    if (!msg.endsWith(clearConsoleCode)) {\n                        // If this string will clear the console, don't append a \\n\n                        msg += '\\n';\n                    }\n\n                    e = new OutputEvent(msg, category);\n                } else {\n                    e = new OutputEvent('output', category);\n                    e.body.variablesReference = this._variablesManager.createHandle(new variables.LoggedObjects(objs), 'repl');\n                }\n\n                if (stackTrace && stackTrace.callFrames.length) {\n                    const stackFrame = await this._stackFrames.mapCallFrame(stackTrace.callFrames[0], this._transformers, this._scriptContainer, this.originProvider);\n                    e.body.source = mapInternalSourceToRemoteClient(stackFrame.source, this._launchAttachArgs.remoteAuthority);\n                    e.body.line = stackFrame.line;\n                    e.body.column = stackFrame.column;\n                }\n\n                this._session.sendEvent(e);\n            })\n            .catch(err => logger.error(err.toString()));\n    }\n\n    protected async onExceptionThrown(params: Crdp.Runtime.ExceptionThrownEvent): Promise<void> {\n        if (this._launchAttachArgs._suppressConsoleOutput) {\n            return;\n        }\n\n        return this._currentLogMessage = this._currentLogMessage.then(async () => {\n            const formattedException = formatExceptionDetails(params.exceptionDetails);\n            const exceptionStr = await this._stackFrames.mapFormattedException(formattedException, this._transformers);\n\n            const e: DebugProtocol.OutputEvent = new OutputEvent(exceptionStr + '\\n', 'stderr');\n            const stackTrace = params.exceptionDetails.stackTrace;\n            if (stackTrace && stackTrace.callFrames.length) {\n                const stackFrame = await this._stackFrames.mapCallFrame(stackTrace.callFrames[0], this._transformers, this._scriptContainer, this.originProvider);\n                e.body.source = mapInternalSourceToRemoteClient(stackFrame.source, this._launchAttachArgs.remoteAuthority);\n                e.body.line = stackFrame.line;\n                e.body.column = stackFrame.column;\n            }\n\n            this._session.sendEvent(e);\n        })\n        .catch(err => logger.error(err.toString()));\n    }\n\n    /**\n     * For backcompat, also listen to Console.messageAdded, only if it looks like the old format.\n     */\n    protected onMessageAdded(params: any): void {\n        // message.type is undefined when Runtime.consoleAPICalled is being sent\n        if (params && params.message && params.message.type) {\n            const onConsoleAPICalledParams: Crdp.Runtime.ConsoleAPICalledEvent = {\n                type: params.message.type,\n                timestamp: params.message.timestamp,\n                args: params.message.parameters || [{ type: 'string', value: params.message.text }],\n                stackTrace: params.message.stack,\n                executionContextId: 1\n            };\n            this.onConsoleAPICalled(onConsoleAPICalledParams);\n        }\n    }\n\n    /* __GDPR__\n        \"ClientRequest/disconnect\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public disconnect(args: DebugProtocol.DisconnectArguments): void {\n        telemetry.reportEvent('FullSessionStatistics/SourceMaps/Overrides', { aspNetClientAppFallbackCount: sourceMapUtils.getAspNetFallbackCount() });\n        this._clientRequestedSessionEnd = true;\n        this.shutdown();\n        this.terminateSession('Got disconnect request', args);\n    }\n\n    /* __GDPR__\n        \"ClientRequest/setBreakpoints\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public setBreakpoints(args: ISetBreakpointsArgs, _: ITelemetryPropertyCollector, requestSeq: number, ids?: number[]): Promise<ISetBreakpointsResponseBody> {\n        if (args.source.path) {\n            args.source.path = mapRemoteClientToInternalPath(args.source.path);\n        }\n        this.reportBpTelemetry(args);\n        return this._breakpoints.setBreakpoints(args, this._scriptContainer, requestSeq, ids);\n    }\n\n    private reportBpTelemetry(args: ISetBreakpointsArgs): void {\n        let fileExt = '';\n        if (args.source.path) {\n            fileExt = path.extname(args.source.path);\n            fileExt = path.extname(args.source.path);\n        }\n\n        /* __GDPR__\n           \"setBreakpointsRequest\" : {\n              \"fileExt\" : { \"classification\": \"CustomerContent\", \"purpose\": \"FeatureInsight\" },\n              \"${include}\": [ \"${DebugCommonProperties}\" ]\n           }\n         */\n        telemetry.reportEvent('setBreakpointsRequest', { fileExt });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/setExceptionBreakpoints\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public setExceptionBreakpoints(args: DebugProtocol.SetExceptionBreakpointsArguments): Promise<void> {\n        let state: 'all' | 'uncaught' | 'none';\n        if (args.filters.indexOf('all') >= 0) {\n            state = 'all';\n        } else if (args.filters.indexOf('uncaught') >= 0) {\n            state = 'uncaught';\n        } else {\n            state = 'none';\n        }\n\n        if (args.filters.indexOf('promise_reject') >= 0) {\n            this._pauseOnPromiseRejections = true;\n        } else {\n            this._pauseOnPromiseRejections = false;\n        }\n\n        return this.chrome.Debugger.setPauseOnExceptions({ state })\n            .then(() => { });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/continue\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    /**\n     * internal -> suppress telemetry\n     */\n    public continue(internal = false): Promise<void> {\n       /* __GDPR__\n          \"continueRequest\" : {\n             \"${include}\": [ \"${DebugCommonProperties}\" ]\n          }\n        */\n        if (!internal) telemetry.reportEvent('continueRequest');\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.resume()\n            .then(() => { /* make void */ },\n                () => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/next\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public next(): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        /* __GDPR__\n           \"nextRequest\" : {\n               \"${include}\": [ \"${DebugCommonProperties}\" ]\n           }\n         */\n        telemetry.reportEvent('nextRequest');\n        this._expectingStopReason = 'step';\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.stepOver()\n            .then(() => { /* make void */ },\n                () => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/stepIn\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public stepIn(userInitiated = true): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        if (userInitiated) {\n            /* __GDPR__\n               \"stepInRequest\" : {\n                  \"${include}\": [ \"${DebugCommonProperties}\" ]\n               }\n             */\n            telemetry.reportEvent('stepInRequest');\n        }\n\n        this._expectingStopReason = 'step';\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.stepInto({ breakOnAsyncCall: true })\n            .then(() => { /* make void */ },\n                () => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/stepOut\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public stepOut(): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        /* __GDPR__\n           \"stepOutRequest\" : {\n              \"${include}\": [ \"${DebugCommonProperties}\" ]\n           }\n         */\n        telemetry.reportEvent('stepOutRequest');\n        this._expectingStopReason = 'step';\n        this._expectingResumedEvent = true;\n        return this._currentStep = this.chrome.Debugger.stepOut()\n            .then(() => { /* make void */ },\n                () => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/stepBack\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public stepBack(): Promise<void> {\n        return (<TimeTravelRuntime>this.chrome).TimeTravel.stepBack()\n            .then(() => { /* make void */ },\n                () => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/reverseContinue\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public reverseContinue(): Promise<void> {\n        return (<TimeTravelRuntime>this.chrome).TimeTravel.reverse()\n            .then(() => { /* make void */ },\n                () => { /* ignore failures - client can send the request when the target is no longer paused */ });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/pause\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public pause(): Promise<void> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        /* __GDPR__\n           \"pauseRequest\" : {\n              \"${include}\": [ \"${DebugCommonProperties}\" ]\n           }\n         */\n        telemetry.reportEvent('pauseRequest');\n        this._expectingStopReason = 'pause';\n        return this._currentStep = this.chrome.Debugger.pause()\n            .then(() => { });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/stackTrace\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async stackTrace(args: DebugProtocol.StackTraceArguments): Promise<IStackTraceResponseBody> {\n        if (!this._currentPauseNotification) {\n            return Promise.reject(errors.noCallStackAvailable());\n        }\n\n        const stackTraceResponse = await this._stackFrames.getStackTrace({\n            args,\n            originProvider: this.originProvider,\n            scripts: this._scriptContainer,\n            scriptSkipper: this._scriptSkipper,\n            smartStepper: this._smartStepper,\n            transformers: this._transformers,\n            pauseEvent: this._currentPauseNotification });\n\n        stackTraceResponse.stackFrames = stackTraceResponse.stackFrames.map(frame => {\n            return { ...frame, source: mapInternalSourceToRemoteClient(frame.source, this._launchAttachArgs.remoteAuthority) };\n        });\n\n        return stackTraceResponse;\n    }\n\n    /**\n     * A stub method for overriding (used for the node debug adapter)\n     */\n    protected getReadonlyOrigin(_url: string): string {\n        // To override\n        return undefined;\n    }\n\n    public realPathToDisplayPath(realPath: string): string { return this._scriptContainer.realPathToDisplayPath(realPath); }\n    public displayPathToRealPath(displayPath: string): string { return this._scriptContainer.displayPathToRealPath(displayPath); }\n\n    /* __GDPR__\n        \"ClientRequest/scopes\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public scopes(args: DebugProtocol.ScopesArguments): IScopesResponseBody {\n        return this._stackFrames.getScopes({\n            args,\n            scripts: this._scriptContainer,\n            variables: this._variablesManager,\n            transformers: this._transformers,\n            pauseEvent: this._currentPauseNotification,\n            currentException: this._exception\n        });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/variables\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async variables(args: DebugProtocol.VariablesArguments): Promise<IVariablesResponseBody> {\n        const result = await this._variablesManager.getVariables(args);\n        const variables = result ? result.variables : [];\n        return { variables: variables.filter(v => ChromeDebugAdapter.FILTERED_VARIABLE_NAMES.indexOf(v.name) === -1) };\n    }\n\n    /* __GDPR__\n        \"ClientRequest/source\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public source(args: DebugProtocol.SourceArguments): Promise<ISourceResponseBody> {\n        let scriptId: Crdp.Runtime.ScriptId;\n        if (args.sourceReference) {\n            const handle = this._scriptContainer.getSource(args.sourceReference);\n            if (!handle) {\n                return Promise.reject(errors.sourceRequestIllegalHandle());\n            }\n\n            // Have inlined content?\n            if (handle.contents) {\n                return Promise.resolve({\n                    content: handle.contents\n                });\n            }\n\n            scriptId = handle.scriptId;\n        } else if (args.source && args.source.path) {\n            const realPath = this.displayPathToRealPath(args.source.path);\n\n            // Request url has chars unescaped, but they will be escaped in scriptsByUrl\n            const script = this.getScriptByUrl(\n                utils.isURL(realPath) ?\n                    encodeURI(realPath) :\n                    realPath);\n\n            if (!script) {\n                return Promise.reject(errors.sourceRequestCouldNotRetrieveContent());\n            }\n\n            scriptId = script.scriptId;\n        }\n\n        if (!scriptId) {\n            return Promise.reject(errors.sourceRequestCouldNotRetrieveContent());\n        }\n\n        // If not, should have scriptId\n        return this.chrome.Debugger.getScriptSource({ scriptId }).then(response => {\n            return {\n                content: response.scriptSource,\n                mimeType: 'text/javascript'\n            };\n        });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/threads\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public threads(): IThreadsResponseBody {\n        return {\n            threads: [\n                {\n                    id: ChromeDebugAdapter.THREAD_ID,\n                    name: this.threadName()\n                }\n            ]\n        };\n    }\n\n    protected threadName(): string {\n        return 'Thread ' + ChromeDebugAdapter.THREAD_ID;\n    }\n\n    /* __GDPR__\n        \"ClientRequest/evaluate\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async evaluate(args: DebugProtocol.EvaluateArguments): Promise<IEvaluateResponseBody> {\n        if (!this.chrome) {\n            return utils.errP(errors.runtimeNotConnectedMsg);\n        }\n\n        if (args.expression.startsWith(ChromeDebugAdapter.SCRIPTS_COMMAND)) {\n            return this.handleScriptsCommand(args);\n        }\n\n        if (args.expression.startsWith('{') && args.expression.endsWith('}')) {\n            args.expression = `(${args.expression})`;\n        }\n\n        const evalResponse = await this.waitThenDoEvaluate(args.expression, args.frameId, { generatePreview: true });\n\n        // Convert to a Variable object then just copy the relevant fields off\n        const variable = await this._variablesManager.remoteObjectToVariable(args.expression, evalResponse.result, /*parentEvaluateName=*/undefined, /*stringify=*/undefined, <VariableContext>args.context);\n        if (evalResponse.exceptionDetails) {\n            let resultValue = variable.value;\n            if (resultValue && (resultValue.startsWith('ReferenceError: ') || resultValue.startsWith('TypeError: ')) && args.context !== 'repl') {\n                resultValue = errors.evalNotAvailableMsg;\n            }\n\n            return utils.errP(resultValue);\n        }\n\n        return <IEvaluateResponseBody>{\n            result: variable.value,\n            variablesReference: variable.variablesReference,\n            indexedVariables: variable.indexedVariables,\n            namedVariables: variable.namedVariables,\n            type: variable.type\n        };\n    }\n\n    /**\n     * Handle the .scripts command, which can be used as `.scripts` to return a list of all script details,\n     * or `.scripts <url>` to show the contents of the given script.\n     */\n    private handleScriptsCommand(args: DebugProtocol.EvaluateArguments): Promise<IEvaluateResponseBody> {\n        let outputStringP: Promise<string>;\n        const scriptsRest = utils.lstrip(args.expression, ChromeDebugAdapter.SCRIPTS_COMMAND).trim();\n        if (scriptsRest) {\n            // `.scripts <url>` was used, look up the script by url\n            const requestedScript = this.getScriptByUrl(scriptsRest);\n            if (requestedScript) {\n                outputStringP = this.chrome.Debugger.getScriptSource({ scriptId: requestedScript.scriptId })\n                    .then(result => {\n                        const maxLength = 1e5;\n                        return result.scriptSource.length > maxLength ?\n                            result.scriptSource.substr(0, maxLength) + '[⋯]' :\n                            result.scriptSource;\n                    });\n            } else {\n                outputStringP = Promise.resolve(`No runtime script with url: ${scriptsRest}\\n`);\n            }\n        } else {\n            outputStringP = this._scriptContainer.getAllScriptsString(this.pathTransformer, this.sourceMapTransformer);\n        }\n\n        return outputStringP.then(scriptsStr => {\n            this._session.sendEvent(new OutputEvent(scriptsStr));\n            return <IEvaluateResponseBody>{\n                result: '',\n                variablesReference: 0\n            };\n        });\n    }\n\n    private async _shouldSmartStepCallFrame(frame: Crdp.Debugger.CallFrame): Promise<boolean> {\n        const stackFrame = this._stackFrames.callFrameToStackFrame(frame, this._scriptContainer, this.originProvider);\n        const fakeResponse = { stackFrames: [stackFrame] };\n        await this.pathTransformer.stackTraceResponse(fakeResponse);\n        await this.sourceMapTransformer.stackTraceResponse(fakeResponse);\n        return this._smartStepper.shouldSmartStep(fakeResponse.stackFrames[0], this.pathTransformer, this.sourceMapTransformer);\n    }\n\n    /**\n     * Allow consumers to override just because of https://github.com/nodejs/node/issues/8426\n     */\n    protected globalEvaluate(args: Crdp.Runtime.EvaluateRequest): Promise<Crdp.Runtime.EvaluateResponse> {\n        return this.chrome.Runtime.evaluate(args);\n    }\n\n    private async waitThenDoEvaluate(expression: string, frameId?: number, extraArgs?: Partial<Crdp.Runtime.EvaluateRequest>): Promise<Crdp.Debugger.EvaluateOnCallFrameResponse | Crdp.Runtime.EvaluateResponse> {\n        const waitThenEval = this._waitAfterStep.then(() => this.doEvaluate(expression, frameId, extraArgs));\n        this._waitAfterStep = waitThenEval.then(() => { }, () => { }); // to Promise<void> and handle failed evals\n        return waitThenEval;\n    }\n\n    private async doEvaluate(expression: string, frameId?: number, extraArgs?: Partial<Crdp.Runtime.EvaluateRequest>): Promise<Crdp.Debugger.EvaluateOnCallFrameResponse | Crdp.Runtime.EvaluateResponse> {\n        if (typeof frameId === 'number') {\n            const frame = this._stackFrames.getFrame(frameId);\n            if (!frame || !frame.callFrameId) {\n                return utils.errP(errors.evalNotAvailableMsg);\n            }\n\n            return this.evaluateOnCallFrame(expression, frame, extraArgs);\n        } else {\n            let args: Crdp.Runtime.EvaluateRequest = {\n                expression,\n                // silent because of an issue where node will sometimes hang when breaking on exceptions in console messages. Fixed somewhere between 8 and 8.4\n                silent: true,\n                includeCommandLineAPI: true,\n                objectGroup: 'console',\n                userGesture: true\n            };\n            if (extraArgs) {\n                args = Object.assign(args, extraArgs);\n            }\n\n            return this.globalEvaluate(args);\n        }\n    }\n\n    async evaluateOnCallFrame(expression: string, frame: Crdp.Debugger.CallFrame, extraArgs?: Partial<Crdp.Runtime.EvaluateRequest>): Promise<Crdp.Debugger.EvaluateOnCallFrameResponse | Crdp.Runtime.EvaluateResponse> {\n        const callFrameId = frame.callFrameId;\n        let args: Crdp.Debugger.EvaluateOnCallFrameRequest = {\n            callFrameId,\n            expression,\n            // silent because of an issue where node will sometimes hang when breaking on exceptions in console messages. Fixed somewhere between 8 and 8.4\n            silent: true,\n            includeCommandLineAPI: true,\n            objectGroup: 'console'\n        };\n        if (extraArgs) {\n            args = Object.assign(args, extraArgs);\n        }\n\n        return this.chrome.Debugger.evaluateOnCallFrame(args);\n    }\n\n    /* __GDPR__\n        \"ClientRequest/setVariable\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public setVariable(args: DebugProtocol.SetVariableArguments): Promise<ISetVariableResponseBody> {\n        return this._variablesManager.setVariable(args);\n    }\n\n    /* __GDPR__\n        \"ClientRequest/restartFrame\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async restartFrame(args: DebugProtocol.RestartFrameArguments): Promise<void> {\n        const callFrame = this._stackFrames.getFrame(args.frameId);\n        if (!callFrame || !callFrame.callFrameId) {\n            return utils.errP(errors.noRestartFrame);\n        }\n\n        try {\n            await this.chrome.Debugger.restartFrame({ callFrameId: callFrame.callFrameId });\n        } catch (_e) { } // Fails in Electron 6, ignore: https://github.com/microsoft/vscode/issues/86411\n\n        this._expectingStopReason = 'frame_entry';\n        return this.chrome.Debugger.stepInto({ });\n    }\n\n    /* __GDPR__\n        \"ClientRequest/completions\" : {\n            \"${include}\": [\n                \"${IExecutionResultTelemetryProperties}\",\n                \"${DebugCommonProperties}\"\n            ]\n        }\n    */\n    public async completions(args: DebugProtocol.CompletionsArguments): Promise<ICompletionsResponseBody> {\n        const text = args.text;\n        const column = args.column;\n\n        // 1-indexed column\n        const prefix = text.substring(0, column - 1);\n\n        let expression: string;\n        const dot = prefix.lastIndexOf('.');\n        if (dot >= 0) {\n            expression = prefix.substr(0, dot);\n        }\n\n        if (typeof args.frameId === 'number' && !expression) {\n            logger.verbose(`Completions: Returning global completions`);\n\n            // If no expression was passed, we must be getting global completions at a breakpoint\n            if (!this._stackFrames.getFrame(args.frameId)) {\n                return Promise.reject(errors.stackFrameNotValid());\n            }\n\n            const callFrame = this._stackFrames.getFrame(args.frameId);\n            if (!callFrame || !callFrame.callFrameId) {\n                // Async frame or label\n                return { targets: [] };\n            }\n\n            const scopeExpandPs = callFrame.scopeChain\n                .map(scope => new ScopeContainer(callFrame.callFrameId, undefined, scope.object.objectId).expand(this._variablesManager));\n            return Promise.all(scopeExpandPs)\n                .then((variableArrs: DebugProtocol.Variable[][]) => {\n                    const targets = this.getFlatAndUniqueCompletionItems(\n                        variableArrs.map(variableArr => variableArr.map(variable => variable.name)));\n                    return { targets };\n                });\n        } else {\n            expression = expression || 'this';\n\n            logger.verbose(`Completions: Returning for expression '${expression}'`);\n            const getCompletionsFn = `(function(x){var a=[];for(var o=x;o!==null&&typeof o !== 'undefined';o=o.__proto__){a.push(Object.getOwnPropertyNames(o))};return a})(${expression})`;\n            const response = await this.waitThenDoEvaluate(getCompletionsFn, args.frameId, { returnByValue: true });\n            if (response.exceptionDetails) {\n                return { targets: [] };\n            } else {\n                return { targets: this.getFlatAndUniqueCompletionItems(response.result.value) };\n            }\n        }\n    }\n\n    private getFlatAndUniqueCompletionItems(arrays: string[][]): DebugProtocol.CompletionItem[] {\n        const set = new Set<string>();\n        const items: DebugProtocol.CompletionItem[] = [];\n\n        for (let i = 0; i < arrays.length; i++) {\n            for (let name of arrays[i]) {\n                if (!isIndexedPropName(name) && !set.has(name)) {\n                    set.add(name);\n                    items.push({\n                        label: <string>name,\n                        type: 'property'\n                    });\n                }\n            }\n        }\n\n        return items;\n    }\n\n    private getScriptByUrl(url: string): Crdp.Debugger.ScriptParsedEvent {\n        return this._scriptContainer.getScriptByUrl(url);\n    }\n\n    public breakpointLocations(args: DebugProtocol.BreakpointLocationsArguments, _telemetryPropertyCollector?: ITelemetryPropertyCollector, requestSeq?: number): Promise<DebugProtocol.BreakpointLocationsResponse['body']> {\n        return this._breakpoints.getBreakpointsLocations(args, this._scriptContainer, requestSeq);\n    }\n}\n"]}