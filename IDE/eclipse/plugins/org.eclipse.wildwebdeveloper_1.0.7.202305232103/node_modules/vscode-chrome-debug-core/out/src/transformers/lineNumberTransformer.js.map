{"version":3,"sources":["../src/transformers/lineNumberTransformer.ts"],"names":[],"mappings":"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","file":"lineNumberTransformer.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\n\nimport { ChromeDebugSession } from '../chrome/chromeDebugSession';\nimport { IDebugTransformer, ISetBreakpointsResponseBody, IStackTraceResponseBody, IScopesResponseBody } from '../debugAdapterInterfaces';\n\n/**\n * Converts from 1 based lines/cols on the client side to 0 based lines/cols on the target side\n */\nexport class LineColTransformer implements IDebugTransformer  {\n    columnBreakpointsEnabled: boolean;\n\n    constructor(private _session: ChromeDebugSession) {\n    }\n\n    public setBreakpoints(args: DebugProtocol.SetBreakpointsArguments): DebugProtocol.SetBreakpointsArguments {\n        args.breakpoints.forEach(bp => this.convertClientLocationToDebugger(bp));\n        if (!this.columnBreakpointsEnabled) {\n            args.breakpoints.forEach(bp => bp.column = undefined);\n        }\n\n        return args;\n    }\n\n    public setBreakpointsResponse(response: ISetBreakpointsResponseBody): void {\n        response.breakpoints.forEach(bp => this.convertDebuggerLocationToClient(bp));\n        if (!this.columnBreakpointsEnabled) {\n            response.breakpoints.forEach(bp => bp.column = 1);\n        }\n    }\n\n    public stackTraceResponse(response: IStackTraceResponseBody): void {\n        response.stackFrames.forEach(frame => this.convertDebuggerLocationToClient(frame));\n    }\n\n    public breakpointResolved(bp: DebugProtocol.Breakpoint): void {\n        this.convertDebuggerLocationToClient(bp);\n        if (!this.columnBreakpointsEnabled) {\n            bp.column = undefined;\n        }\n    }\n\n    public scopeResponse(scopeResponse: IScopesResponseBody): void {\n        scopeResponse.scopes.forEach(scope => this.mapScopeLocations(scope));\n    }\n\n    public mappedExceptionStack(location: { line: number; column: number }): void {\n        this.convertDebuggerLocationToClient(location);\n    }\n\n    private mapScopeLocations(scope: DebugProtocol.Scope): void {\n        this.convertDebuggerLocationToClient(scope);\n\n        if (typeof scope.endLine === 'number') {\n            const endScope = { line: scope.endLine, column: scope.endColumn };\n            this.convertDebuggerLocationToClient(endScope);\n            scope.endLine = endScope.line;\n            scope.endColumn = endScope.column;\n        }\n    }\n\n    public convertClientLocationToDebugger(location: { line?: number; column?: number }): void {\n        if (typeof location.line === 'number') {\n            location.line = this.convertClientLineToDebugger(location.line);\n        }\n\n        if (typeof location.column === 'number') {\n            location.column = this.convertClientColumnToDebugger(location.column);\n        }\n    }\n\n    public convertDebuggerLocationToClient(location: { line?: number; column?: number }): void {\n        if (typeof location.line === 'number') {\n            location.line = this.convertDebuggerLineToClient(location.line);\n        }\n\n        if (typeof location.column === 'number') {\n            location.column = this.convertDebuggerColumnToClient(location.column);\n        }\n    }\n\n    public convertClientLineToDebugger(line: number): number {\n        return (<any>this._session).convertClientLineToDebugger(line);\n    }\n\n    public convertDebuggerLineToClient(line: number): number {\n        return (<any>this._session).convertDebuggerLineToClient(line);\n    }\n\n    public convertClientColumnToDebugger(column: number): number {\n        return (<any>this._session).convertClientColumnToDebugger(column);\n    }\n\n    public convertDebuggerColumnToClient(column: number): number {\n        return (<any>this._session).convertDebuggerColumnToClient(column);\n    }\n}\n"],"sourceRoot":"../.."}