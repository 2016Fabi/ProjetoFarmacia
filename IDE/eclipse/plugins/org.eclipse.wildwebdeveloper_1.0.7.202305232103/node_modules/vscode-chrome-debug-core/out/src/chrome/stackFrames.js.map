{"version":3,"sources":["../src/chrome/stackFrames.ts"],"names":[],"mappings":"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","file":"stackFrames.js","sourceRoot":"../..","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { Handles } from 'vscode-debugadapter';\nimport { IStackTraceResponseBody,\n    IInternalStackTraceResponseBody } from '../debugAdapterInterfaces';\nimport { Protocol as Crdp } from 'devtools-protocol';\nimport { Transformers } from './chromeDebugAdapter';\nimport { ScriptContainer } from './scripts';\nimport { SmartStepper } from './smartStep';\nimport { ScriptSkipper } from './scriptSkipping';\n\nimport * as ChromeUtils from './chromeUtils';\nimport * as utils from '../utils';\nimport * as path from 'path';\nimport * as nls from 'vscode-nls';\nimport * as errors from '../errors';\nimport { VariablesManager } from './variablesManager';\nimport { ScopeContainer, ExceptionContainer } from './variables';\n\nlet localize = nls.loadMessageBundle();\n\nexport class StackFrames {\n\n    private _frameHandles = new Handles<Crdp.Debugger.CallFrame>();\n\n    constructor() {}\n\n    /**\n     * Clear the currently stored stack frames\n     */\n    reset() {\n        this._frameHandles.reset();\n    }\n\n    /**\n     * Get a stack frame by its id\n     */\n    getFrame(frameId: number) {\n        return this._frameHandles.get(frameId);\n    }\n\n    public async getStackTrace({ args, scripts, originProvider, scriptSkipper, smartStepper, transformers, pauseEvent }:\n                { args: DebugProtocol.StackTraceArguments;\n                  scripts: ScriptContainer;\n                  originProvider: (url: string) => string;\n                  scriptSkipper: ScriptSkipper;\n                  smartStepper: SmartStepper;\n                  transformers: Transformers;\n                  pauseEvent: Crdp.Debugger.PausedEvent; }): Promise<IStackTraceResponseBody> {\n\n        let stackFrames = pauseEvent.callFrames.map(frame => this.callFrameToStackFrame(frame, scripts, originProvider))\n            .concat(this.asyncFrames(pauseEvent.asyncStackTrace, scripts, originProvider));\n\n        const totalFrames = stackFrames.length;\n        if (typeof args.startFrame === 'number') {\n            stackFrames = stackFrames.slice(args.startFrame);\n        }\n\n        if (typeof args.levels === 'number') {\n            stackFrames = stackFrames.slice(0, args.levels);\n        }\n\n        const stackTraceResponse: IInternalStackTraceResponseBody = {\n            stackFrames,\n            totalFrames\n        };\n        await transformers.pathTransformer.stackTraceResponse(stackTraceResponse);\n        await transformers.sourceMapTransformer.stackTraceResponse(stackTraceResponse);\n\n        await Promise.all(stackTraceResponse.stackFrames.map(async (frame) => {\n            // Remove isSourceMapped to convert back to DebugProtocol.StackFrame\n            const isSourceMapped = frame.isSourceMapped;\n            delete frame.isSourceMapped;\n\n            if (!frame.source) {\n                return;\n            }\n\n            // Apply hints to skipped frames\n            const getSkipReason = reason => localize('skipReason', \"(skipped by '{0}')\", reason);\n            if (frame.source.path && scriptSkipper.shouldSkipSource(frame.source.path)) {\n                frame.source.origin = (frame.source.origin ? frame.source.origin + ' ' : '') + getSkipReason('skipFiles');\n                frame.source.presentationHint = 'deemphasize';\n            } else if (!isSourceMapped && await smartStepper.shouldSmartStep(frame, transformers.pathTransformer, transformers.sourceMapTransformer)) {\n                // TODO !isSourceMapped is a bit of a hack here\n                frame.source.origin = (frame.source.origin ? frame.source.origin + ' ' : '') + getSkipReason('smartStep');\n                (<any>frame).presentationHint = 'deemphasize';\n            }\n\n            // Allow consumer to adjust final path\n            if (frame.source.path && frame.source.sourceReference) {\n                frame.source.path = scripts.realPathToDisplayPath(frame.source.path);\n            }\n\n            // And finally, remove the fake eval path and fix the name, if it was never resolved to a real path\n            if (frame.source.path && ChromeUtils.isEvalScript(frame.source.path)) {\n                frame.source.path = undefined;\n                frame.source.name = scripts.displayNameForSourceReference(frame.source.sourceReference);\n            }\n        }));\n\n        transformers.lineColTransformer.stackTraceResponse(stackTraceResponse);\n        stackTraceResponse.stackFrames.forEach(frame => frame.name = this.formatStackFrameName(frame, args.format));\n\n        return stackTraceResponse;\n    }\n\n    getScopes({ args, scripts, transformers, variables, pauseEvent, currentException }:\n              { args: DebugProtocol.ScopesArguments;\n                scripts: ScriptContainer;\n                transformers: Transformers;\n                variables: VariablesManager;\n                pauseEvent: Crdp.Debugger.PausedEvent;\n                currentException: any; }): { scopes: DebugProtocol.Scope[]; } {\n        const currentFrame = this._frameHandles.get(args.frameId);\n        if (!currentFrame || !currentFrame.location || !currentFrame.callFrameId) {\n            throw errors.stackFrameNotValid();\n        }\n\n        if (!currentFrame.callFrameId) {\n            return { scopes: [] };\n        }\n\n        const currentScript = scripts.getScriptById(currentFrame.location.scriptId);\n        const currentScriptUrl = currentScript && currentScript.url;\n        const currentScriptPath = (currentScriptUrl && transformers.pathTransformer.getClientPathFromTargetPath(currentScriptUrl)) || currentScriptUrl;\n\n        const scopes = currentFrame.scopeChain.map((scope: Crdp.Debugger.Scope, i: number) => {\n            // The first scope should include 'this'. Keep the RemoteObject reference for use by the variables request\n            const thisObj = i === 0 && currentFrame.this;\n            const returnValue = i === 0 && currentFrame.returnValue;\n            const variablesReference = variables.createHandle(\n                new ScopeContainer(currentFrame.callFrameId, i, scope.object.objectId, thisObj, returnValue));\n\n            const resultScope = <DebugProtocol.Scope>{\n                name: scope.type.substr(0, 1).toUpperCase() + scope.type.substr(1), // Take Chrome's scope, uppercase the first letter\n                variablesReference,\n                expensive: scope.type === 'global'\n            };\n\n            if (scope.startLocation && scope.endLocation) {\n                resultScope.column = scope.startLocation.columnNumber;\n                resultScope.line = scope.startLocation.lineNumber;\n                resultScope.endColumn = scope.endLocation.columnNumber;\n                resultScope.endLine = scope.endLocation.lineNumber;\n            }\n\n            return resultScope;\n        });\n\n        if (currentException && this.lookupFrameIndex(args.frameId, pauseEvent) === 0) {\n            scopes.unshift(<DebugProtocol.Scope>{\n                name: localize('scope.exception', 'Exception'),\n                variablesReference: variables.createHandle(ExceptionContainer.create(currentException))\n            });\n        }\n\n        const scopesResponse = { scopes };\n        if (currentScriptPath) {\n            transformers.sourceMapTransformer.scopesResponse(currentScriptPath, scopesResponse);\n            transformers.lineColTransformer.scopeResponse(scopesResponse);\n        }\n\n        return scopesResponse;\n    }\n\n    public async mapCallFrame(frame: Crdp.Runtime.CallFrame, transformers: Transformers, scripts: ScriptContainer, originProvider: (url: string) => string ): Promise<DebugProtocol.StackFrame> {\n        const debuggerCF = this.runtimeCFToDebuggerCF(frame);\n        const stackFrame = this.callFrameToStackFrame(debuggerCF, scripts, originProvider);\n        await transformers.pathTransformer.fixSource(stackFrame.source);\n        await transformers.sourceMapTransformer.fixSourceLocation(stackFrame);\n        transformers.lineColTransformer.convertDebuggerLocationToClient(stackFrame);\n        return stackFrame;\n    }\n\n    // We parse stack trace from `formattedException`, source map it and return a new string\n    public async mapFormattedException(formattedException: string, transformers: Transformers): Promise<string> {\n        const exceptionLines = formattedException.split(/\\r?\\n/);\n\n        for (let i = 0, len = exceptionLines.length; i < len; ++i) {\n            const line = exceptionLines[i];\n            const matches = line.match(/^\\s+at (.*?)\\s*\\(?([^ ]+):(\\d+):(\\d+)\\)?$/);\n\n            if (!matches) continue;\n            const linePath = matches[2];\n            const lineNum = parseInt(matches[3], 10);\n            const adjustedLineNum = lineNum - 1;\n            const columnNum = parseInt(matches[4], 10);\n            const clientPath = transformers.pathTransformer.getClientPathFromTargetPath(linePath);\n            const mapped = await transformers.sourceMapTransformer.mapToAuthored(clientPath || linePath, adjustedLineNum, columnNum);\n\n            if (mapped && mapped.source && utils.isNumber(mapped.line) && utils.isNumber(mapped.column) && utils.existsSync(mapped.source)) {\n                transformers.lineColTransformer.mappedExceptionStack(mapped);\n                exceptionLines[i] = exceptionLines[i].replace(\n                    `${linePath}:${lineNum}:${columnNum}`,\n                    `${mapped.source}:${mapped.line}:${mapped.column}`);\n            } else if (clientPath && clientPath !== linePath) {\n                const location = { line: adjustedLineNum, column: columnNum };\n                transformers.lineColTransformer.mappedExceptionStack(location);\n                exceptionLines[i] = exceptionLines[i].replace(\n                    `${linePath}:${lineNum}:${columnNum}`,\n                    `${clientPath}:${location.line}:${location.column}`);\n            }\n        }\n\n        return exceptionLines.join('\\n');\n    }\n\n    private asyncFrames(stackTrace: Crdp.Runtime.StackTrace, scripts: ScriptContainer, originProvider: (url: string) => string): DebugProtocol.StackFrame[] {\n        if (stackTrace) {\n            const frames = stackTrace.callFrames\n                .map(frame => this.runtimeCFToDebuggerCF(frame))\n                .map(frame => this.callFrameToStackFrame(frame, scripts, originProvider));\n\n            frames.unshift({\n                id: this._frameHandles.create(null),\n                name: `[ ${stackTrace.description} ]`,\n                source: undefined,\n                line: undefined,\n                column: undefined,\n                presentationHint: 'label'\n            });\n\n            return frames.concat(this.asyncFrames(stackTrace.parent, scripts, originProvider));\n        } else {\n            return [];\n        }\n    }\n\n    private runtimeCFToDebuggerCF(frame: Crdp.Runtime.CallFrame): Crdp.Debugger.CallFrame {\n        return {\n            callFrameId: undefined,\n            scopeChain: undefined,\n            this: undefined,\n            location: {\n                lineNumber: frame.lineNumber,\n                columnNumber: frame.columnNumber,\n                scriptId: frame.scriptId\n            },\n            url: frame.url,\n            functionName: frame.functionName\n        };\n    }\n\n    private formatStackFrameName(frame: DebugProtocol.StackFrame, formatArgs?: DebugProtocol.StackFrameFormat): string {\n        let formattedName = frame.name;\n\n        if (frame.source && formatArgs) {\n            if (formatArgs.module) {\n                formattedName += ` [${frame.source.name}]`;\n            }\n\n            if (formatArgs.line) {\n                formattedName += ` Line ${frame.line}`;\n            }\n        }\n\n        return formattedName;\n    }\n\n    public callFrameToStackFrame(frame: Crdp.Debugger.CallFrame, scripts: ScriptContainer, originProvider: (url: string) => string): DebugProtocol.StackFrame {\n        const { location, functionName } = frame;\n        const line = location.lineNumber;\n        const column = location.columnNumber;\n        const script = scripts.getScriptById(location.scriptId);\n\n        try {\n            // When the script has a url and isn't one we're ignoring, send the name and path fields. PathTransformer will\n            // attempt to resolve it to a script in the workspace. Otherwise, send the name and sourceReference fields.\n            const sourceReference = scripts.getSourceReferenceForScriptId(script.scriptId);\n            const source: DebugProtocol.Source = {\n                name: path.basename(script.url),\n                path: script.url,\n                sourceReference,\n                origin: originProvider(script.url)\n            };\n\n            // If the frame doesn't have a function name, it's either an anonymous function\n            // or eval script. If its source has a name, it's probably an anonymous function.\n            const frameName = functionName || (script.url ? '(anonymous function)' : '(eval code)');\n            return {\n                id: this._frameHandles.create(frame),\n                name: frameName,\n                source,\n                line,\n                column\n            };\n        } catch (e) {\n            // Some targets such as the iOS simulator behave badly and return nonsense callFrames.\n            // In these cases, return a dummy stack frame\n            const evalUnknown = `${ChromeUtils.EVAL_NAME_PREFIX}_Unknown`;\n            return {\n                id: this._frameHandles.create(<any>{ }),\n                name: evalUnknown,\n                source: { name: evalUnknown, path: evalUnknown },\n                line,\n                column\n            };\n        }\n    }\n\n    /**\n     * Try to lookup the index of the frame with given ID. Returns -1 for async frames and unknown frames.\n     */\n    public lookupFrameIndex(frameId: number, pauseEvent: Crdp.Debugger.PausedEvent): number {\n        const currentFrame = this._frameHandles.get(frameId);\n        if (!currentFrame || !currentFrame.callFrameId || !pauseEvent) {\n            return -1;\n        }\n\n        return pauseEvent.callFrames.findIndex(frame => frame.callFrameId === currentFrame.callFrameId);\n    }\n}"]}