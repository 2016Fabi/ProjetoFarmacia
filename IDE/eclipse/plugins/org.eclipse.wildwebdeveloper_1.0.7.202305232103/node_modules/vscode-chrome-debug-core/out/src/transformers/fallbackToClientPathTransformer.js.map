{"version":3,"sources":["../src/transformers/fallbackToClientPathTransformer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;4DAE4D;AAC5D,6DAA6C;AAE7C,6DAA0D;AAE1D,qDAAqD;AAErD;;GAEG;AACH,qCAA6C,SAAQ,uCAAkB;IAGnE,YAAoB,QAA4B;QAC5C,KAAK,EAAE,CAAC;QADQ,aAAQ,GAAR,QAAQ,CAAoB;IAEhD,CAAC;IAEe,qBAAqB,CAAC,SAAiB;;;YACnD,0DAA0D;YAC1D,MAAM,CAAC,+BAA2B,YAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACtD,+FAA+F;gBAC/F,4EAA4E;gBAC5E,MAAM,CAAC,CAAC,QAAQ,IAAI,WAAW,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;oBACpD,CAAC,CAAC,QAAQ;oBACV,4GAA4G;oBAC5G,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;wBAChE,4BAAM,CAAC,GAAG,CAAC,6CAA6C,GAAG,SAAS,CAAC,CAAC;wBACtE,MAAM,CAAC,QAAQ,CAAC;oBACpB,CAAC,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEa,+BAA+B,CAAC,GAAW;;YACrD,MAAM,CAAC,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC3C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,kBAAkB,EAAE,EAAC,GAAG,EAAE,GAAG,EAAC,EAAE,+BAA+B,CAAC,0CAA0C,EAAE,QAAQ,CAAC,EAAE;oBAC7I,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;wBACnB,4BAAM,CAAC,GAAG,CAAC,sCAAsC,GAAG,4BAA4B,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;wBAC3G,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACpC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,KAAK,CAAC,sCAAsC,GAAG,+CAA+C,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;oBAClI,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;;AAhCc,0EAA0C,GAAG,GAAG,CAAC;AADpE,0EAkCC","file":"fallbackToClientPathTransformer.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\nimport { logger } from 'vscode-debugadapter';\n\nimport { UrlPathTransformer } from './urlPathTransformer';\nimport { ChromeDebugSession } from '../chrome/chromeDebugSession';\nimport * as ChromeUtils from '../chrome/chromeUtils';\n\n/**\n * Converts a local path from Code to a path on the target. Uses the UrlPathTransforme logic and fallbacks to asking the client if neccesary\n */\nexport class FallbackToClientPathTransformer extends UrlPathTransformer {\n    private static ASK_CLIENT_TO_MAP_URL_TO_FILE_PATH_TIMEOUT = 500;\n\n    constructor(private _session: ChromeDebugSession) {\n        super();\n    }\n\n    protected async targetUrlToClientPath(scriptUrl: string): Promise<string> {\n        // First try the default UrlPathTransformer transformation\n        return super.targetUrlToClientPath(scriptUrl).then(filePath => {\n                // If it returns a valid non empty file path then that should be a valid result, so we use that\n                // If it's an eval script we won't be able to map it, so we also return that\n                return (filePath || ChromeUtils.isEvalScript(scriptUrl))\n                    ? filePath\n                    // In any other case we ask the client to map it as a fallback, and return filePath if there is any failures\n                    : this.requestClientToMapURLToFilePath(scriptUrl).catch(rejection => {\n                        logger.log('The fallback transformation failed due to: ' + rejection);\n                        return filePath;\n                    });\n        });\n    }\n\n    private async requestClientToMapURLToFilePath(url: string): Promise<string> {\n        return new Promise<string>((resolve, reject) => {\n            this._session.sendRequest('mapURLToFilePath', {url: url}, FallbackToClientPathTransformer.ASK_CLIENT_TO_MAP_URL_TO_FILE_PATH_TIMEOUT, response => {\n                if (response.success) {\n                    logger.log(`The client responded that the url \"${url}\" maps to the file path \"${response.body.filePath}\"`);\n                    resolve(response.body.filePath);\n                } else {\n                    reject(new Error(`The client responded that the url \"${url}\" couldn't be mapped to a file path due to: ${response.message}`));\n                }\n            });\n        });\n    }\n}\n"],"sourceRoot":"../.."}