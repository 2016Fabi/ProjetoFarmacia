{"version":3,"sources":["../src/sourceMaps/sourceMap.ts"],"names":[],"mappings":";AAAA;;4DAE4D;;AAE5D,2CAAmF;AACnF,6BAA6B;AAE7B,mDAAmD;AACnD,kCAAkC;AAClC,6DAA6C;AAc7C;IAiDI;;;OAGG;IACH,YAAmB,aAAqB,EAAE,IAAY,EAAE,WAA0B,EAAE,sBAAwD,EAAE,UAAU,GAAG,KAAK;QAjDxJ,yBAAoB,GAAG,IAAI,GAAG,EAAkB,CAAC,CAAC,yDAAyD;QAkD/G,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QAEpC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5B,4BAAM,CAAC,GAAG,CAAC,2BAA2B,aAAa,EAAE,CAAC,CAAC;QACvD,4BAAM,CAAC,GAAG,CAAC,0BAA0B,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC;YAC9D,4BAAM,CAAC,GAAG,CAAC,uMAAuM,CAAC,CAAC;QACxN,CAAC;QACD,4BAAM,CAAC,GAAG,CAAC,uBAAuB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChE,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,4BAAM,CAAC,GAAG,CAAC,2BAA2B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QACzE,CAAC;QAED,gBAAgB;QAChB,MAAM,kBAAkB,GAAG,cAAc,CAAC,qBAAqB,CAAC,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QAEjH,6FAA6F;QAC7F,6CAA6C;QAC7C,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC,UAAU,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC,OAAO,CAAC;QACnC,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC;QAErB,6HAA6H;QAC7H,gGAAgG;QAChG,6DAA6D;QAC7D,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YACxC,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBACzB,MAAM,eAAe,GAAG,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;gBAChG,MAAM,qBAAqB,GAAG,cAAc,CAAC,2BAA2B,CAAC,eAAe,EAAE,sBAAsB,EAAE,UAAU,CAAC,CAAC;gBAC9H,EAAE,CAAC,CAAC,eAAe,KAAK,qBAAqB,CAAC,CAAC,CAAC;oBAC5C,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;gBACxD,CAAC;YACL,CAAC;YAED,EAAE,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACnC,gBAAgB;gBAChB,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC/B,qDAAqD;gBACrD,UAAU,GAAG,KAAK,CAAC,aAAa,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,gFAAgF;QAChF,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;YAC3C,oHAAoH;YACpH,wEAAwE;YACxE,MAAM,sBAAsB,GAAG,aAAa,CAAC,WAAW,EAAE,CAAC;YAC3D,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,sBAAsB,EAAE,aAAa,CAAC,CAAC;YACrE,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,GAAG,IAAI,8BAAiB,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAnGD;;;OAGG;IACH,IAAW,oBAAoB;QAC3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAC9B,0GAA0G;YAC1G,wBAAwB;YACxB,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,EAAE,EAAE;gBAC/D,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gBAChD,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;gBAC7I,MAAM,CAAqB;oBACvB,YAAY;oBACZ,YAAY;oBACZ,aAAa,EAAE,IAAI,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC/D,CAAC;YACN,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACb,8DAA8D;gBAC9D,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBACnB,4BAAM,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;oBAClE,MAAM,CAAC,CAAC,CAAC,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC1B,4BAAM,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;oBAClE,MAAM,CAAC,CAAC,CAAC;gBACb,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;oBAChD,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC;gBAC3D,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC;gBACvD,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;IACtC,CAAC;IAkED;;OAEG;IACH,IAAW,eAAe;QACtB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED;;OAEG;IACI,aAAa;QAChB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,iBAAiB,CAAC,OAAe;QACpC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACI,mBAAmB,CAAC,IAAY,EAAE,MAAc;QACnD,uCAAuC;QACvC,IAAI,EAAE,CAAC;QAEP,MAAM,UAAU,GAAG;YACf,IAAI;YACJ,MAAM;YACN,IAAI,EAAQ,8BAAkB,CAAC,oBAAoB;SACtD,CAAC;QAEF,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACnB,mGAAmG;YACnG,UAAU,CAAC,IAAI,GAAS,8BAAkB,CAAC,iBAAiB,CAAC;YAC7D,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzD,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAClB,4BAA4B;YAC5B,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEzD,gCAAgC;YAChC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC;YAEpF,0BAA0B;YAC1B,QAAQ,CAAC,IAAI,EAAE,CAAC;YAEhB,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,oBAAoB,CAAC,MAAc,EAAE,IAAY,EAAE,MAAc;QACpE,uCAAuC;QACvC,IAAI,EAAE,CAAC;QAEP,wDAAwD;QACxD,qDAAqD;QACrD,MAAM,GAAG,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAC;QAEzD,MAAM,UAAU,GAAG;YACf,IAAI;YACJ,MAAM;YACN,MAAM;YACN,IAAI,EAAQ,8BAAkB,CAAC,iBAAiB;SACnD,CAAC;QAEF,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,mGAAmG;YACnG,UAAU,CAAC,IAAI,GAAS,8BAAkB,CAAC,oBAAoB,CAAC;YAChE,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAC1D,CAAC;QAED,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC;gBACH,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG,CAAC;gBACvB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,MAAM,EAAE,IAAI,CAAC,cAAc;aAC9B,CAAC;QACN,CAAC;IACL,CAAC;IAEM,gBAAgB,CAAC,kBAA0B;QAC9C,kBAAkB,GAAG,KAAK,CAAC,aAAa,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QACnE,MAAM,CAAO,IAAI,CAAC,IAAK,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,wBAAwB,CAAA,IAAI,CAAC,CAAC;IAC/F,CAAC;CACJ;AApND,8BAoNC","file":"sourceMap.js","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport { SourceMapConsumer, MappedPosition as MappedPositionSM } from 'source-map';\nimport * as path from 'path';\n\nimport * as sourceMapUtils from './sourceMapUtils';\nimport * as utils from '../utils';\nimport { logger } from 'vscode-debugadapter';\nimport { IPathMapping } from '../debugAdapterInterfaces';\n\nexport type MappedPosition = MappedPositionSM;\n\n/**\n * A pair of the original path in the sourcemap, and the full absolute path as inferred\n */\nexport interface ISourcePathDetails {\n    originalPath: string;\n    inferredPath: string;\n    startPosition: MappedPosition;\n}\n\nexport class SourceMap {\n    private _generatedPath: string; // the generated file for this sourcemap (absolute path)\n    private _sources: string[]; // list of authored files (absolute paths)\n    private _smc: SourceMapConsumer; // the source map\n    private _authoredPathCaseMap = new Map<string, string>(); // Maintain pathCase map because VSCode is case sensitive\n\n    private _allSourcePathDetails: ISourcePathDetails[]; // A list of all original paths from the sourcemap, and their inferred local paths\n\n    // Original sourcemap details\n    private _originalSources: string[];\n    private _originalSourceRoot: string;\n\n    /**\n     * Returns list of ISourcePathDetails for all sources in this sourcemap, sorted by their\n     * positions within the sourcemap.\n     */\n    public get allSourcePathDetails(): ISourcePathDetails[] {\n        if (!this._allSourcePathDetails) {\n            // Lazy compute because the source-map lib handles the bulk of the sourcemap parsing lazily, and this info\n            // is not always needed.\n            this._allSourcePathDetails = this._sources.map((inferredPath, i) => {\n                const originalSource = this._originalSources[i];\n                const originalPath = this._originalSourceRoot ? sourceMapUtils.getFullSourceEntry(this._originalSourceRoot, originalSource) : originalSource;\n                return <ISourcePathDetails>{\n                    inferredPath,\n                    originalPath,\n                    startPosition: this.generatedPositionFor(inferredPath, 0, 0)\n                };\n            }).sort((a, b) => {\n                // https://github.com/Microsoft/vscode-chrome-debug/issues/353\n                if (!a.startPosition) {\n                    logger.log(`Could not map start position for: ${a.inferredPath}`);\n                    return -1;\n                } else if (!b.startPosition) {\n                    logger.log(`Could not map start position for: ${b.inferredPath}`);\n                    return 1;\n                }\n\n                if (a.startPosition.line === b.startPosition.line) {\n                    return a.startPosition.column - b.startPosition.column;\n                } else {\n                    return a.startPosition.line - b.startPosition.line;\n                }\n            });\n        }\n\n        return this._allSourcePathDetails;\n    }\n\n    /**\n     * generatedPath: an absolute local path or a URL\n     * json: sourcemap contents as string\n     */\n    public constructor(generatedPath: string, json: string, pathMapping?: IPathMapping, sourceMapPathOverrides?: utils.IStringDictionary<string>, isVSClient = false) {\n        this._generatedPath = generatedPath;\n\n        const sm = JSON.parse(json);\n        logger.log(`SourceMap: creating for ${generatedPath}`);\n        logger.log(`SourceMap: sourceRoot: ${sm.sourceRoot}`);\n        if (sm.sourceRoot && sm.sourceRoot.toLowerCase() === '/source/') {\n            logger.log('Warning: if you are using gulp-sourcemaps < 2.0 directly or indirectly, you may need to set sourceRoot manually in your build config, if your files are not actually under a directory called /source');\n        }\n        logger.log(`SourceMap: sources: ${JSON.stringify(sm.sources)}`);\n        if (pathMapping) {\n            logger.log(`SourceMap: pathMapping: ${JSON.stringify(pathMapping)}`);\n        }\n\n        // Absolute path\n        const computedSourceRoot = sourceMapUtils.getComputedSourceRoot(sm.sourceRoot, this._generatedPath, pathMapping);\n\n        // Overwrite the sourcemap's sourceRoot with the version that's resolved to an absolute path,\n        // so the work above only has to be done once\n        this._originalSourceRoot = sm.sourceRoot;\n        this._originalSources = sm.sources;\n        sm.sourceRoot = null;\n\n        // sm.sources are initially relative paths, file:/// urls, made-up urls like webpack:///./app.js, or paths that start with /.\n        // resolve them to file:/// urls, using computedSourceRoot, to be simpler and unambiguous, since\n        // it needs to look them up later in exactly the same format.\n        this._sources = sm.sources.map(sourcePath => {\n            if (sourceMapPathOverrides) {\n                const fullSourceEntry = sourceMapUtils.getFullSourceEntry(this._originalSourceRoot, sourcePath);\n                const mappedFullSourceEntry = sourceMapUtils.applySourceMapPathOverrides(fullSourceEntry, sourceMapPathOverrides, isVSClient);\n                if (fullSourceEntry !== mappedFullSourceEntry) {\n                    return utils.canonicalizeUrl(mappedFullSourceEntry);\n                }\n            }\n\n            if (sourcePath.startsWith('file://')) {\n                // strip file://\n                return utils.canonicalizeUrl(sourcePath);\n            }\n\n            if (!path.isAbsolute(sourcePath)) {\n                // Overrides not applied, use the computed sourceRoot\n                sourcePath = utils.properResolve(computedSourceRoot, sourcePath);\n            }\n\n            return utils.canonicalizeUrl(sourcePath);\n        });\n\n        // Rewrite sm.sources to same as this._sources but file url with forward slashes\n        sm.sources = this._sources.map(sourceAbsPath => {\n            // Convert to file:/// url. After this, it's a file URL for an absolute path to a file on disk with forward slashes.\n            // We lowercase so authored <-> generated mapping is not case sensitive.\n            const lowerCaseSourceAbsPath = sourceAbsPath.toLowerCase();\n            this._authoredPathCaseMap.set(lowerCaseSourceAbsPath, sourceAbsPath);\n            return utils.pathToFileURL(lowerCaseSourceAbsPath, true);\n        });\n\n        this._smc = new SourceMapConsumer(sm);\n    }\n\n    /*\n     * Return all mapped sources as absolute paths\n     */\n    public get authoredSources(): string[] {\n        return this._sources;\n    }\n\n    /*\n     * The generated file of this source map.\n     */\n    public generatedPath(): string {\n        return this._generatedPath;\n    }\n\n    /*\n     * Returns true if this source map originates from the given source.\n     */\n    public doesOriginateFrom(absPath: string): boolean {\n        return this.authoredSources.some(path => path === absPath);\n    }\n\n    /*\n     * Finds the nearest source location for the given location in the generated file.\n     * Will return null instead of a mapping on the next line (different from generatedPositionFor).\n     */\n    public authoredPositionFor(line: number, column: number): MappedPosition {\n        // source-map lib uses 1-indexed lines.\n        line++;\n\n        const lookupArgs = {\n            line,\n            column,\n            bias: (<any>SourceMapConsumer).GREATEST_LOWER_BOUND\n        };\n\n        let position = this._smc.originalPositionFor(lookupArgs);\n        if (!position.source) {\n            // If it can't find a match, it returns a mapping with null props. Try looking the other direction.\n            lookupArgs.bias = (<any>SourceMapConsumer).LEAST_UPPER_BOUND;\n            position = this._smc.originalPositionFor(lookupArgs);\n        }\n\n        if (position.source) {\n            // file:/// -> absolute path\n            position.source = utils.canonicalizeUrl(position.source);\n\n            // Convert back to original case\n            position.source = this._authoredPathCaseMap.get(position.source) || position.source;\n\n            // Back to 0-indexed lines\n            position.line--;\n\n            return position;\n        } else {\n            return null;\n        }\n    }\n\n    /*\n     * Finds the nearest location in the generated file for the given source location.\n     * Will return a mapping on the next line, if there is no subsequent mapping on the expected line.\n     */\n    public generatedPositionFor(source: string, line: number, column: number): MappedPosition {\n        // source-map lib uses 1-indexed lines.\n        line++;\n\n        // sources in the sourcemap have been forced to file:///\n        // Convert to lowerCase so search is case insensitive\n        source = utils.pathToFileURL(source.toLowerCase(), true);\n\n        const lookupArgs = {\n            line,\n            column,\n            source,\n            bias: (<any>SourceMapConsumer).LEAST_UPPER_BOUND\n        };\n\n        let position = this._smc.generatedPositionFor(lookupArgs);\n        if (position.line === null) {\n            // If it can't find a match, it returns a mapping with null props. Try looking the other direction.\n            lookupArgs.bias = (<any>SourceMapConsumer).GREATEST_LOWER_BOUND;\n            position = this._smc.generatedPositionFor(lookupArgs);\n        }\n\n        if (position.line === null) {\n            return null;\n        } else {\n            return {\n                line: position.line - 1, // Back to 0-indexed lines\n                column: position.column,\n                source: this._generatedPath\n            };\n        }\n    }\n\n    public sourceContentFor(authoredSourcePath: string): string {\n        authoredSourcePath = utils.pathToFileURL(authoredSourcePath, true);\n        return (<any>this._smc).sourceContentFor(authoredSourcePath, /*returnNullOnMissing=*/true);\n    }\n}\n"],"sourceRoot":"../.."}