{"version":3,"sources":["../src/transformers/remotePathTransformer.ts"],"names":[],"mappings":"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","file":"remotePathTransformer.js","sourceRoot":"../..","sourcesContent":["/*---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { logger } from 'vscode-debugadapter';\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { IAttachRequestArgs, ICommonRequestArgs, ILaunchRequestArgs, IStackTraceResponseBody } from '../debugAdapterInterfaces';\nimport * as errors from '../errors';\nimport { UrlPathTransformer } from '../transformers/urlPathTransformer';\nimport * as utils from '../utils';\nimport * as nls from 'vscode-nls';\n\nconst localize = nls.loadMessageBundle();\n\n/**\n * Converts a local path from Code to a path on the target.\n */\nexport class RemotePathTransformer extends UrlPathTransformer {\n    private _localRoot: string;\n    private _remoteRoot: string;\n\n    public async launch(args: ILaunchRequestArgs): Promise<void> {\n        await super.launch(args);\n        return this.init(args);\n    }\n\n    public async attach(args: IAttachRequestArgs): Promise<void> {\n        await super.attach(args);\n        return this.init(args);\n    }\n\n    private async init(args: ICommonRequestArgs): Promise<void> {\n        if ((args.localRoot && !args.remoteRoot) || (args.remoteRoot && !args.localRoot)) {\n            throw new Error(localize('localRootAndRemoteRoot', 'Both localRoot and remoteRoot must be specified.'));\n        }\n\n        // Maybe validate that it's absolute, for either windows or unix\n        this._remoteRoot = args.remoteRoot;\n\n        // Validate that localRoot is absolute and exists\n        let localRootP = Promise.resolve();\n        if (args.localRoot) {\n            const localRoot = args.localRoot;\n            if (!path.isAbsolute(localRoot)) {\n                return Promise.reject(errors.attributePathRelative('localRoot', localRoot));\n            }\n\n            localRootP = new Promise<void>((resolve, reject) => {\n                fs.exists(localRoot, exists => {\n                    if (!exists) {\n                        reject(errors.attributePathNotExist('localRoot', localRoot));\n                    }\n\n                    this._localRoot = localRoot;\n                    resolve();\n                });\n            });\n        }\n\n        return localRootP;\n    }\n\n    public async scriptParsed(scriptPath: string): Promise<string> {\n        if (!this.shouldMapPaths(scriptPath)) {\n            scriptPath = await super.scriptParsed(scriptPath);\n        }\n\n        scriptPath = this.getClientPathFromTargetPath(scriptPath) || scriptPath;\n\n        return scriptPath;\n    }\n\n    public async stackTraceResponse(response: IStackTraceResponseBody): Promise<void> {\n        await Promise.all(response.stackFrames.map(stackFrame => this.fixSource(stackFrame.source)));\n    }\n\n    public async fixSource(source: DebugProtocol.Source): Promise<void> {\n        await super.fixSource(source);\n\n        const remotePath = source && source.path;\n        if (remotePath) {\n            const localPath = this.getClientPathFromTargetPath(remotePath) || remotePath;\n            if (utils.existsSync(localPath)) {\n                source.path = localPath;\n                source.sourceReference = undefined;\n                source.origin = undefined;\n            }\n        }\n    }\n\n    private shouldMapPaths(remotePath: string): boolean {\n        // Map paths only if localRoot/remoteRoot are set, and the remote path is absolute on some system\n        return !!this._localRoot && !!this._remoteRoot && (path.posix.isAbsolute(remotePath) || path.win32.isAbsolute(remotePath) || utils.isFileUrl(remotePath));\n    }\n\n    public getClientPathFromTargetPath(remotePath: string): string {\n        remotePath = super.getClientPathFromTargetPath(remotePath) || remotePath;\n\n        // Map as non-file-uri because remoteRoot won't expect a file uri\n        remotePath = utils.fileUrlToPath(remotePath);\n        if (!this.shouldMapPaths(remotePath)) return '';\n\n        const relPath = relative(this._remoteRoot, remotePath);\n        if (relPath.startsWith('../')) return '';\n\n        let localPath = join(this._localRoot, relPath);\n\n        localPath = utils.fixDriveLetterAndSlashes(localPath);\n        logger.log(`Mapped remoteToLocal: ${remotePath} -> ${localPath}`);\n        return localPath;\n    }\n\n    public getTargetPathFromClientPath(localPath: string): string {\n        localPath = super.getTargetPathFromClientPath(localPath) || localPath;\n        if (!this.shouldMapPaths(localPath)) return localPath;\n\n        const relPath = relative(this._localRoot, localPath);\n        if (relPath.startsWith('../')) return '';\n\n        let remotePath = join(this._remoteRoot, relPath);\n\n        remotePath = utils.fixDriveLetterAndSlashes(remotePath, /*uppercaseDriveLetter=*/true);\n        logger.log(`Mapped localToRemote: ${localPath} -> ${remotePath}`);\n        return remotePath;\n    }\n}\n\n/**\n * Cross-platform path.relative\n */\nfunction relative(a: string, b: string): string {\n    return a.match(/^[A-Za-z]:/) ?\n        path.win32.relative(a, b) :\n        path.posix.relative(a, b);\n}\n\n/**\n * Cross-platform path.join\n */\nfunction join(a: string, b: string): string {\n    return a.match(/^[A-Za-z]:/) ?\n        path.win32.join(a, b) :\n        utils.forceForwardSlashes(path.posix.join(a, b));\n}\n"]}