{"version":3,"sources":["../src/chrome/scripts.ts"],"names":[],"mappings":"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","file":"scripts.js","sourcesContent":["import * as utils from '../utils';\nimport { CrdpScript } from './chromeDebugAdapter';\nimport { Protocol as Crdp } from 'devtools-protocol';\nimport * as ChromeUtils from './chromeUtils';\nimport { DebugProtocol } from 'vscode-debugprotocol';\nimport { ChromeDebugAdapter } from './chromeDebugAdapter';\nimport { BasePathTransformer, BaseSourceMapTransformer } from '..';\nimport * as path from 'path';\nimport { mapInternalSourceToRemoteClient } from '../remoteMapper';\n\n/**\n * Represents a reference to a source/script. `contents` is set if there are inlined sources.\n * Otherwise, scriptId can be used to retrieve the contents from the runtime.\n */\nexport interface ISourceContainer {\n    /** The runtime-side scriptId of this script */\n    scriptId?: Crdp.Runtime.ScriptId;\n    /** The contents of this script, if they are inlined in the sourcemap */\n    contents?: string;\n    /** The authored path to this script (only set if the contents are inlined) */\n    mappedPath?: string;\n}\n\n/**\n * A container class for loaded script files\n */\nexport class ScriptContainer {\n\n    private _scriptsById = new Map<Crdp.Runtime.ScriptId, CrdpScript>();\n    private _scriptsByUrl = new Map<string, CrdpScript>();\n    private _sourceHandles = new utils.ReverseHandles<ISourceContainer>();\n\n    /**\n     * @deprecated use the function calls instead\n     */\n    public get scriptsByIdMap() { return this._scriptsById; }\n\n    /**\n     * Get a list of all currently loaded scripts\n     */\n    public get loadedScripts() { return this._scriptsById.values(); }\n\n    /**\n     * Get a script by its url\n     */\n    public getScriptByUrl(url: string) {\n        const canonUrl = utils.canonicalizeUrl(url);\n        return this._scriptsByUrl.get(canonUrl) || this._scriptsByUrl.get(utils.fixDriveLetter(canonUrl));\n    }\n\n    /**\n     * Clear this container of all loaded scripts\n     */\n    public reset() {\n        this._scriptsById = new Map<Crdp.Runtime.ScriptId, Crdp.Debugger.ScriptParsedEvent>();\n        this._scriptsByUrl = new Map<string, Crdp.Debugger.ScriptParsedEvent>();\n    }\n\n    /**\n     * Add a newly parsed script to this container\n     * @param script The scriptParsed event from the chrome-devtools target\n     */\n    public add(script: Crdp.Debugger.ScriptParsedEvent) {\n        this._scriptsById.set(script.scriptId, script);\n        this._scriptsByUrl.set(utils.canonicalizeUrl(script.url), script);\n    }\n\n    /**\n     * Get a script by its chrome-devtools script identifier\n     * @param id The script id which came from a chrome-devtools scriptParsed event\n     */\n    public getScriptById(id: string) {\n        return this._scriptsById.get(id);\n    }\n\n    /**\n     * Get a list of all loaded script urls (as a string)\n     */\n    public getAllScriptsString(pathTransformer: BasePathTransformer, sourceMapTransformer: BaseSourceMapTransformer): Promise<string> {\n        const runtimeScripts = Array.from(this._scriptsByUrl.keys())\n            .sort();\n        return Promise.all(runtimeScripts.map(script => this.getOneScriptString(script, pathTransformer, sourceMapTransformer))).then(strs => {\n            return strs.join('\\n');\n        });\n    }\n\n    /**\n     * Get a script string?\n     */\n    public getOneScriptString(runtimeScriptPath: string, pathTransformer: BasePathTransformer, sourceMapTransformer: BaseSourceMapTransformer): Promise<string> {\n        let result = 'â€º ' + runtimeScriptPath;\n        const clientPath = pathTransformer.getClientPathFromTargetPath(runtimeScriptPath);\n        if (clientPath && clientPath !== runtimeScriptPath) result += ` (${clientPath})`;\n\n        return sourceMapTransformer.allSourcePathDetails(clientPath || runtimeScriptPath).then(sourcePathDetails => {\n            let mappedSourcesStr = sourcePathDetails.map(details => `    - ${details.originalPath} (${details.inferredPath})`).join('\\n');\n            if (sourcePathDetails.length) mappedSourcesStr = '\\n' + mappedSourcesStr;\n\n            return result + mappedSourcesStr;\n        });\n    }\n\n    /**\n     * Get the existing handle for this script, identified by runtime scriptId, or create a new one\n     */\n    public getSourceReferenceForScriptId(scriptId: Crdp.Runtime.ScriptId): number {\n        return this._sourceHandles.lookupF(container => container.scriptId === scriptId) ||\n            this._sourceHandles.create({ scriptId });\n    }\n\n    /**\n     * Get the existing handle for this script, identified by the on-disk path it was mapped to, or create a new one\n     */\n    public getSourceReferenceForScriptPath(mappedPath: string, contents: string): number {\n        return this._sourceHandles.lookupF(container => container.mappedPath === mappedPath) ||\n            this._sourceHandles.create({ contents, mappedPath });\n    }\n\n    /**\n     * Map a chrome script to a DAP source\n     * @param script The scriptParsed event object from chrome-devtools target\n     * @param origin The origin of the script (node only)\n     */\n    public async scriptToSource(script: Crdp.Debugger.ScriptParsedEvent, origin: string, remoteAuthority?: string): Promise<DebugProtocol.Source> {\n        const sourceReference = this.getSourceReferenceForScriptId(script.scriptId);\n        const properlyCasedScriptUrl = utils.canonicalizeUrl(script.url);\n        const displayPath = this.realPathToDisplayPath(properlyCasedScriptUrl);\n\n        const exists = await utils.existsAsync(properlyCasedScriptUrl); // script.url can start with file:/// so we use the canonicalized version\n        const source = <DebugProtocol.Source>{\n            name: path.basename(displayPath),\n            path: displayPath,\n            // if the path exists, do not send the sourceReference\n            sourceReference: exists ? undefined : sourceReference,\n            origin\n        };\n\n        if (remoteAuthority) {\n            return mapInternalSourceToRemoteClient(source, remoteAuthority);\n        } else {\n            return source;\n        }\n    }\n\n    /**\n     * Get a source handle by it's reference number\n     * @param ref Reference number of a source object\n     */\n    public getSource(ref: number) {\n        return this._sourceHandles.get(ref);\n    }\n\n    public fakeUrlForSourceReference(sourceReference: number): string {\n        const handle = this._sourceHandles.get(sourceReference);\n        return `${ChromeUtils.EVAL_NAME_PREFIX}${handle.scriptId}`;\n    }\n\n    public displayNameForSourceReference(sourceReference: number): string {\n        const handle = this._sourceHandles.get(sourceReference);\n        return (handle && this.displayNameForScriptId(handle.scriptId)) || sourceReference + '';\n    }\n\n    public displayNameForScriptId(scriptId: number|string): string {\n        return `${ChromeUtils.EVAL_NAME_PREFIX}${scriptId}`;\n    }\n\n    /**\n     * Called when returning a stack trace, for the path for Sources that have a sourceReference, so consumers can\n     * tweak it, since it's only for display.\n     */\n    public realPathToDisplayPath(realPath: string): string {\n        if (ChromeUtils.isEvalScript(realPath)) {\n            return `${ChromeDebugAdapter.EVAL_ROOT}/${realPath}`;\n        }\n\n        return realPath;\n    }\n\n    /**\n     * Get the original path back from a displayPath created from `realPathToDisplayPath`\n     */\n    public displayPathToRealPath(displayPath: string): string {\n        if (displayPath.startsWith(ChromeDebugAdapter.EVAL_ROOT)) {\n            return displayPath.substr(ChromeDebugAdapter.EVAL_ROOT.length + 1); // Trim \"<eval>/\"\n        }\n\n        return displayPath;\n    }\n}\n"],"sourceRoot":"../.."}