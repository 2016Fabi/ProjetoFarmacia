Headers.group = Headers

Header.desc        = Checks that a source file begins with a specified header. Property  headerFile specifies a file that contains the required header. Alternatively, the header specification can be set directly in the <code>header</code> property without the need for an external file.<br/><br/>\r\nProperty <code>ignoreLines</code> specifies the line numbers to ignore when matching lines in a header file. This property is very useful for supporting headers that contain copyright dates. For example, consider the following header:\r\n<pre>\r\nline 1: ////////////////////////////////////////////////////////////////////\r\nline 2: // checkstyle:\r\nline 3: // Checks Java source code for adherence to a set of rules.\r\nline 4: // Copyright (C) 2002  Oliver Burn\r\nline 5: ////////////////////////////////////////////////////////////////////\r\n</pre>\r\nSince the year information will change over time, you can tell Checkstyle to ignore line 4 by setting property <code>ignoreLines</code> to 4. 
Header.header      = the required header specified inline. Individual header lines must be separated by the string "\\\\n" (even on platforms with a different line separator).
Header.headerFile  = name of the file containing the required header.
Header.charset     = character encoding to use when reading the headerFile (defaults to the charset property of the parent Checker module)
Header.ignoreLines = line numbers to ignore (comma separated)
Header.name        = Header
Header.fileExtensions = File type extension of files to process

RegexpHeader.desc       = Checks the header of a java source file against a header that contains a regular expression for each line of the source header.<br/>\r\nRationale: In some projects checking against a fixed header is not sufficient, e.g. the header might require a copyright line where the year information is not static.<br/>\r\nFor example, consider the following header:\r\n<pre>\r\nline  1: ^/{71}$\r\nline  2: ^// checkstyle:$\r\nline  3: ^// Checks Java source code for adherence to a set of rules\\.$\r\nline  4: ^// Copyright \\(C\\) \\d\\d\\d\\d  Oliver Burn$\r\nline  5: ^// Last modification by \\$Author.*\\$$\r\nline  6: ^/{71}$\r\nline  7:\r\nline  8: ^package\r\nline  9:\r\nline 10: ^import\r\nline 11:\r\nline 12: ^/\\*\\*\r\nline 13: ^ \\*([^/]|$)\r\nline 14: ^ \\*/\r\n</pre>\r\nLines 1 and 6 demonstrate a more compact notation for 71 '/' characters. Line 4 enforces that the copyright notice includes a four digit year. Line 5 is an example how to enforce revision control keywords in a file header. Lines 12-14 is a template for javadoc (line 13 is so complicated to remove conflict with and of javadoc comment). 
RegexpHeader.header     = the required header specified inline. Individual header lines must be separated by the string "\\\\n" (even on platforms with a different line separator), and regular expressions must not span multiple lines.
RegexpHeader.headerFile = name of the file containing the required header.
RegexpHeader.charset    = character encoding to use when reading the headerFile (defaults to the charset property of the parent Checker module)
RegexpHeader.multiLines = line numbers to repeat (zero or more times)
RegexpHeader.name       = Regular Expression Header
RegexpHeader.fileExtensions = File type extension of files to process