
ArrayTypeStyle.desc      = Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[]).
ArrayTypeStyle.javaStyle = Controls whether to enforce Java style (true) or C style (false).
ArrayTypeStyle.name      = Array Type Style

DescendantToken.desc           = Checks for restricted tokens beneath other tokens.<br/>\r\nWARNING: This is a very powerful and flexible check, but, at the same time, it is low level and very implementation dependent because its results depend on the grammar we use to build abstract syntax trees. Thus we recomend using other checks when they provide the desired funcionality. All in all, this check just works on the level of an abstract tree and knows nothing about language structures.
DescendantToken.limitedTokens  = Tokens to check.
DescendantToken.maximumDepth   = the maximum depth for descendant counts
DescendantToken.maximumMessage = error message when maximum count exceeded
DescendantToken.maximumNumber  = a maximum count for descendants
DescendantToken.minimumDepth   = the minimum depth for descendant counts
DescendantToken.minimumMessage = error message when minimum count not reached
DescendantToken.minimumNumber  = a minimum count for descendants
DescendantToken.name           = Descendent Token Check
DescendantToken.sumTokenCounts = whether the number of tokens found should be calculated from the sum of the individual token counts
DescendantToken.tokens         = Tokens to check.

FinalParameters.desc   = Check that method/constructor parameters are final. Interface methods are not checked - the final keyword does not make sense for interface method parameters as there is no code that could modify the parameter.<br/>\r\nRationale: Changing the value of parameters during the execution of the method's algorithm can be confusing and should be avoided. A great way to let the Java compiler prevent this coding style is to declare parameters final.
FinalParameters.name   = Final Parameters
FinalParameters.tokens = Tokens to check.
FinalParameters.ignorePrimitiveTypes = ignore primitive types as parameters

GenericIllegalRegexp.desc           = A generic check for code problems - the user can search for any pattern. This is similar to a recursive grep, only that it's integrated in checkstyle.<br/>\r\nRationale: This check can be used to prototype checks and to find common bad practice such as calling <code>ex.printStacktrace()</code>, <code>System.out.println()</code>, <code>System.exit()</code>, etc.
GenericIllegalRegexp.format         = Pattern to check for.
GenericIllegalRegexp.ignoreCase     = Controls whether to ignore case when searching.
GenericIllegalRegexp.ignoreComments = Controls whether to ignore text in comments when searching.
GenericIllegalRegexp.message        = Message which is used to notify about violations, if empty then default(hard-coded) message is used.
GenericIllegalRegexp.name           = Generic Illegal Regexp

Indentation.basicOffset     = how many spaces to use for new indentation level
Indentation.braceAdjustment = how far brace should be indented when on next line
Indentation.caseIndent      = how much to indent a case label
Indentation.desc            = Checks correct indentation of Java Code.<br/>\r\nThe basic idea behind this is that while pretty printers are sometimes convienent for bulk reformats of legacy code, they often either aren't configurable enough or just can't anticipate how format should be done. Sometimes this is personal preference, other times it is practical experience. In any case, this check should just ensure that a minimal set of indentation rules are followed.
Indentation.name            = Indentation
Indentation.throwsIndent    = how far throws should be indented when on next line
Indentation.arrayInitIndent = how much to indent an array initialization when on next line
Indentation.lineWrappingIndentation = how far continuation line should be indented when line-wrapping is present
Indentation.forceStrictCondition = force strict condition in line wrapping case. If value is true, line wrap indent have to be same as lineWrappingIndentation parameter

Miscellaneous.group = Miscellaneous

NewlineAtEndOfFile.desc           = Checks whether files end with a new line.<br/>\r\nRationale: Any source files and text files in general should end with a newline character, especially when using SCM systems such as CVS. CVS will even print a warning when it encounters a file that doesn't end with a newline.
NewlineAtEndOfFile.fileExtensions = file type extension of the files to check.
NewlineAtEndOfFile.lineSeparator  = type of line separator
NewlineAtEndOfFile.name           = New Line At End Of File

Regexp.desc           = A check that makes sure that a specified pattern exists, exists less than a set number of times, or does not exist in the file.<br/>\r\nThis check combines all the functionality provided by RegexpHeader, GenericIllegalRegexp and RequiredRegexp, except supplying the regular expression from a file.\r\n<br/>\r\nIt differs from them in that it works in multiline mode. It's regular expression can span multiple lines and it checks this against the whole file at once. The others work in singleline mode. Their single or multiple regular expressions can only span one line. They check each of these against each line in the file in turn.\r\n<br/>\r\nNote: Because of the different mode of operation there may be some changes in the regular expressions used to achieve a particular end.\r\n<br/>\r\nIn multiline mode...\r\n<ul>\r\n<li>^ means beginning of a line, as oposed to beginning of input.</li>\r\n<li>For beginning of input use \\A.</li>\r\n<li>$ means end of a line, as oposed to end of input.</li>\r\n<li>For end of input use \\Z.</li>\r\n<li>Each line in the file is terminated with a newline character.</li>\r\n</ul>\r\nNote: Not all regexp engines are created equal. Some provide extra functions that others do not and some elements of the syntax may vary. This check makes use of the java.util.regex package, please check its documentation for details of how to construct a regular expression to achive a particular goal.\r\n<br/>\r\nNote: When entering a regular expression as a parameter in the xml config file you must also take into account the xml rules. e.g. if you want to match a < symbol you need to enter &lt;. The regular expression should be entered on one line.
Regexp.duplicateLimit = Controls whether to check for duplicates of a required pattern, any negative value means no checking for duplicates, any positive value is used as the maximum number of allowed duplicates, if the limit is exceeded errors will be logged.
Regexp.errorLimit     = Controls the maximum number of errors before the check will abort.
Regexp.format         = Regular expression pattern.
Regexp.ignoreComments = Controls whether to ignore matches found within comments.
Regexp.illegalPattern = Controls whether the pattern is required or illegal.
Regexp.message        = message which is used to notify about violations, if empty then default(hard-coded) message is used.
Regexp.name           = Regexp

RequiredRegexp.desc   = A check that makes sure that a specified pattern exists in the code, e.g. a required legal text. It does not care about where in the file the pattern is
RequiredRegexp.format = required pattern
RequiredRegexp.name   = Required Regular Expression

TodoComment.desc   = A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. To check for other patterns in Java comments, set property format.
TodoComment.format = Regular expression definging pattern to look for.
TodoComment.name   = Todo Comment

TrailingComment.desc         = The check to ensure that requires that comments be the only thing on a line. For the case of // comments that means that the only thing that should precede it is whitespace. It doesn't check comments if they do not end line, i.e. it accept the following: Thread.sleep( 10 <some comment here> ); Format property is intended to deal with the "} // while" example.<br/>\r\nRationale: Steve McConnel in "Code Complete" suggests that endline comments are a bad practice. An end line comment would be one that is on the same line as actual code. For example:\r\n<pre>\r\na = b + c;      // Some insightful comment\r\nd = e / f;        // Another comment for this line\r\n</pre>\r\nQuoting "Code Complete" for the justfication:<br/>\r\n<ul>\r\n<li>"The comments have to be aligned so that they do not interfere with the visual structure of the code. If you don't align them neatly, they'll make your listing look like it's been through a washing machine."</li>\r\n<li>"Endline comments tend to be hard to format...It takes time to align them. Such time is not spent learning more about the code; it's dedicated solely to the tedious task of pressing the spacebar or tab key."</li>\r\n<li>"Endline comments are also hard to maintain. If the code on any line containing an endline comment grows, it bumps the comment farther out, and all the other endline comments will have to bumped out to match. Styles that are hard to maintain aren't maintained...."</li>\r\n<li>"Endline comments also tend to be cryptic. The right side of the line doesn't offer much room and the desire to keep the comment on one line means the comment must be short. Work then goes into making the line as short as possible instead of as clear as possible. The comment usually ends up as cryptic as possible...."</li>\r\n<li>"A systemic problem with endline comments is that it's hard to write a meaningful comment for one line of code. Most endline comments just repeat the line of code, which hurts more than it helps."</li>\r\n</ul>\r\nHis comments on being hard to maintain when the size of the line changes are even more important in the age of automated refactorings.
TrailingComment.format       = pattern for string allowed before comment.
TrailingComment.legalComment = pattern for text of trailing comment which is allowed. (this pattern will not be applied to multiline comments and text of comment will be trimmed before matching)
TrailingComment.name         = Trailing Comment

Translation.desc           = A FileSetCheck that ensures the correct translation of code by checking property files for consistency regarding their keys. Two property files describing one and the same context are consistent if they contain the same keys.<br/>\r\nConsider the following properties file in the same directory:\r\n<pre>\r\n#messages.properties\r\nhello=Hello\r\ncancel=Cancel\r\n\r\n#messages_de.properties\r\nhell=Hallo\r\nok=OK\r\n</pre>\r\nThe Translation check will find the typo in the german hello key, the missing ok key in the default resource file and the missing cancel key in the german resource file:\r\n<pre>\r\nmessages_de.properties: Key 'hello' missing.\r\nmessages_de.properties: Key 'cancel' missing.\r\nmessages.properties: Key 'hell' missing.\r\nmessages.properties: Key 'ok' missing.\r\n</pre>\r\n\u0009
Translation.fileExtensions = file type extension to identify translation files. Setting this property is typically only required if your translation files are preprocessed and the original files do not have the extension .properties
Translation.name           = Translation
Translation.basenameSeparator = Allows setting file names separator

UncommentedMain.desc            = Checks for uncommented main() methods (debugging leftovers).<br/>\r\nRationale: A main() method is often used for debug puposes. When debugging is finished, developers often forget to remove the method, which changes the API and increases the size of the resulting class/jar file. With the exception of the real program entry points, all main() methods should be removed/commented out of the sources.
UncommentedMain.excludedClasses = pattern for qualified names of classes which ar allowed to have main method.
UncommentedMain.name            = Uncommented Main

UpperEll.desc = Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification, Section 3.10.1.<br/>\r\nRationale: The lower case letter l looks a lot like the digit 1.
UpperEll.name = Upper Ell

OuterTypeFilename.name = Outer Type File Name
OuterTypeFilename.desc = Checks that the outer type name and the file name match. For example, the class Foo must be in a file named <code>Foo.java</code>.

AvoidEscapedUnicodeCharacters.name = Avoid Escaped Unicode Characters
AvoidEscapedUnicodeCharacters.desc = Restrict using Unicode escapes (e.g. \u221e). It is possible to allow using escapes for non-printable(control) characters. Also, this check can be configured to allow using escapes if trail comment is present. By the option it is possible to allow using escapes if literal contains only them.
AvoidEscapedUnicodeCharacters.allowEscapesForControlCharacters = Allow use escapes for non-printable(control) characters.
AvoidEscapedUnicodeCharacters.allowByTailComment = Allow use escapes if trail comment is present.
AvoidEscapedUnicodeCharacters.allowIfAllCharactersEscaped = Allow if all characters in literal are escaped.
AvoidEscapedUnicodeCharacters.allowNonPrintableEscapes = Allow non-printable escapes.

UniqueProperties.name = Unique Properties
UniqueProperties.desc =  Checks properties file for a duplicated properties.<br/><br/>Rationale: Multiple property keys usually appears after merge or rebase of several branches. While there is no errors in runtime, there can be a confusion on having different values for the duplicated properties.
UniqueProperties.fileExtensions = file type extension of the files to check.